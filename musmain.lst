     1                                  [org 0x0100]
     2 00000000 E9525F                  				jmp start
     3                                  %ifndef moveBird_asm
     4                                  %define moveBird_asm
     5                                  
     6 00000003 55                      moveBird:                   push bp
     7 00000004 89E5                                                mov bp, sp
     8                                  
     9 00000006 60                                                  pushA
    10 00000007 8B5E04                                              mov bx, [bp+4]          ; bird y
    11 0000000A 8B7606                                              mov si, [bp+6]          ; bird flag address
    12                                  
    13 0000000D 803C55                                              cmp byte [si], 'U'
    14 00000010 740F                                                je moveUp
    15 00000012 803C57                                              cmp byte [si], 'W'
    16 00000015 7415                                                je exit
    17                                  							
    18 00000017 813FB400                                            cmp word [bx], 180  ;terminationnnnnnnnnnnnnnn
    19 0000001B 772F                                                ja exittt
    20 0000001D FF07                                                inc word [bx]
    21 0000001F EB0B                                                jmp exit
    22                                  
    23 00000021 833F03                          moveUp:             cmp word [bx], 3
    24 00000024 7606                                                jbe exit
    25 00000026 832F03                                              sub word [bx], 3
    26 00000029 C60457                                              mov byte [si], 'W'
    27                                  							
    28                                  						
    29                                                             
    30                                          exit: 
    31                                  	
    32 0000002C 61                      		popA
    33 0000002D 89EC                                                mov sp, bp
    34 0000002F 5D                                                  pop bp
    35 00000030 C20400                                              ret 4
    36                                  							down :
    37 00000033 83070A                  							add word[bx],10
    38                                  							
    39                                  
    40                                  moveBirddown:
    41 00000036 55                          push bp
    42 00000037 89E5                        mov bp, sp
    43 00000039 60                          pusha
    44 0000003A 8B5E04                      mov bx, [bp+4]          ; bird y position
    45                                  
    46                                  check_ground:
    47 0000003D 813F9600                    cmp word [bx], 150      ; Check if bird is already at the ground
    48 00000041 7409                        je exittt               ; If yes, exit
    49                                  
    50 00000043 830732                      add word [bx], 50       ; Move the bird down by 1
    51 00000046 813F9600                    cmp word [bx], 150      ; Check again if the bird has reached the ground
    52 0000004A 75F1                        jne check_ground        ; If not, continue moving down
    53                                  
    54                                  
    55                                  exittt:
    56 0000004C 61                          popa
    57 0000004D B400                    mov ah,0
    58 0000004F CD16                    int 16h
    59 00000051 E8905E                      call exitProgramFunction1
    60 00000054 89EC                        mov sp, bp
    61 00000056 5D                          pop bp
    62 00000057 C20200                      ret 2
    63                                  
    64                                  collisioncheck:
    65 0000005A 55                          push bp
    66 0000005B 89E5                        mov bp, sp
    67 0000005D 60                          pusha
    68 0000005E 8B7E04                      mov di, [bp+4]
    69                                     ; mov si, [bp+6]
    70 00000061 8B5E06                      mov bx, [bp+6]
    71                                  
    72 00000064 26803D0F                    cmp byte [es:di], 0x0f  ; Check if the pixel is background (0x07)
    73 00000068 7402                        je collision           ; If yes, handle collision
    74                                  
    75                                          
    76 0000006A EB02                       jmp exitt
    77                                     ; down:
    78                                     ; add word[bx],5
    79                                     ; cmp word[bx],150
    80                                     ; j
    81                                     ; jne down
    82                                  
    83                                  collision:
    84                                  
    85                                  ; push byte 'W'
    86                                  ; push word bx
    87                                  ; call moveBird
    88                                  ;      ; Set flag to 'D' (for moving down)
    89                                      ; push bx                 ; Push bird's position
    90                                      ; call moveBirddown 
    91                                      
    92 0000006C EBDE                    jmp exittt
    93                                               
    94                                  
    95                                  exitt:
    96 0000006E 61                          popa
    97 0000006F 89EC                        mov sp, bp
    98 00000071 5D                          pop bp
    99 00000072 C20400                      ret 4
   100                                  %endif
   101                                  
   102                                  	
   103                                  
   104                                                          %include "printScreen.asm"
     1                              <1> ; %ifndef printScreen_asm
     2                              <1> ; %define printScreen_asm
     3                              <1> 
     4                              <1> ; %include "clrscr.asm"
     5                              <1> ; %include "printPillars.asm"
     6                              <1> ; %include "printGrass.asm"
     7                              <1> 
     8                              <1> ; %include "batt.asm"
     9                              <1> 
    10                              <1> ; print_scr:		push bp
    11                              <1> 				; mov bp, sp
    12                              <1> 				
    13                              <1> 				; pusha
    14                              <1> 				; push es
    15                              <1> 
    16                              <1> 				; push word[bp+10]			; ax = 0x0000
    17                              <1> 				; push word[bp+34]			; cx = 320*190 = 64,000
    18                              <1> 				; push word[bp+6]				; es = 0xA000
    19                              <1> 				; push word[bp+4]				; di = 0x0000
    20                              <1> 				; call clrscr
    21                              <1> 
    22                              <1> 				; push word[bp+16]			; attribute (color) = 0x02 (green)
    23                              <1> 				; push word[bp+8]				; total bytes = 320*200 = 64,000
    24                              <1> 				; push word[bp+14]			; row number = 194
    25                              <1> 				; push word[bp+12]			; cx = width (columns) = 320
    26                              <1> 				; push word[bp+6]				; es = 0xA000
    27                              <1> 				; call grass
    28                              <1> 				; mov ax,0xA000
    29                              <1> 				; mov es,ax
    30                              <1> 				; mov ax,0
    31                              <1> 				; mov cx,8
    32                              <1> 				; mov di,60920
    33                              <1> ; rep stosw
    34                              <1> 				
    35                              <1> 				; push word [bp+36]			; grass height
    36                              <1> 				; push word [bp+22]			; space between pillars
    37                              <1> 				; push word [bp+38]			; height = 200
    38                              <1> 				
    39                              <1> 				; push word [bp+40]			; rectangle height = 72
    40                              <1> 				; push word [bp+26]			; rectangle width = 30
    41                              <1> 				; push word [bp+24]			; attribute (color) = 0x04 (red)
    42                              <1> 				; push word [bp+12]			; width (columns) = 320
    43                              <1> 				; push word [bp+20]			; x = 0
    44                              <1> 				; push word [bp+18]			; y = 260
    45                              <1> 				; push word [bp+6]			; es = 0xA000
    46                              <1> 				; call printPillars
    47                              <1> 
    48                              <1> 			
    49                              <1> 				; push word[bp+32]
    50                              <1> 				; push word[bp+30]
    51                              <1> 			; push word 0x04
    52                              <1> 		
    53                              <1> 				; call printBirdy
    54                              <1> 
    55                              <1> 			
    56                              <1> 				; pop es
    57                              <1> 				; popa
    58                              <1> 				; mov sp, bp
    59                              <1> 				; pop bp
    60                              <1> 				; ret 38
    61                              <1> 
    62                              <1> ; %endif
    63                              <1> %ifndef printScreen_asm
    64                              <1> %define printScreen_asm
    65                              <1> %include "palette.asm"
     1                              <2> %ifndef palette_asm
     2                              <2> %define palette_asm
     3                              <2> 
     4                              <2> ; start
     5 00000075 000000000000000000- <2> palette_data0: db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x00, 0x26, 0x00, 0x00, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x19, 0x0C, 0x00, 0x26, 0x0C, 0x00, 0x33, 0x0C, 0x00, 0x3F, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x0C, 0x19, 0x00, 0x19, 0x19, 0x00, 0x26, 0x19, 0x00, 0x33, 0x19, 0x00, 0x3F, 0x19, 0x00, 0x00, 0x26, 0x00, 0x0C, 0x26, 0x00, 0x19, 0x26, 0x00, 0x26, 0x26, 0x00, 0x33, 0x26, 0x00, 0x3F, 0x26, 0x00, 0x00, 0x33, 0x00, 0x0C, 0x33, 0x00, 0x19, 0x33, 0x00, 0x26, 0x33, 0x00, 0x33, 0x33, 0x00, 0x3F, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x0C, 0x3F, 0x00, 0x19, 0x3F, 0x00, 0x26, 0x3F, 0x00, 0x33, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x19, 0x00, 0x0C, 0x26, 0x00, 0x0C, 0x33, 0x00, 0x0C, 0x3F, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x19, 0x0C, 0x0C, 0x26, 0x0C, ...
     5 0000007E 000000000000000000- <2>
     5 00000087 000000000000000000- <2>
     5 00000090 0000000000000C0000- <2>
     5 00000099 190000260000330000- <2>
     5 000000A2 3F0000000C000C0C00- <2>
     5 000000AB 190C00260C00330C00- <2>
     5 000000B4 3F0C000019000C1900- <2>
     5 000000BD 191900261900331900- <2>
     5 000000C6 3F19000026000C2600- <2>
     5 000000CF 192600262600332600- <2>
     5 000000D8 3F26000033000C3300- <2>
     5 000000E1 193300263300333300- <2>
     5 000000EA 3F3300003F000C3F00- <2>
     5 000000F3 193F00263F00333F00- <2>
     5 000000FC 3F3F0000000C0C000C- <2>
     5 00000105 19000C26000C33000C- <2>
     5 0000010E 3F000C000C0C0C0C0C- <2>
     5 00000117 190C0C260C0C330C0C- <2>
     5 00000120 3F0C0C00190C0C190C- <2>
     5 00000129 19190C26190C33190C- <2>
     5 00000132 3F190C00260C0C260C- <2>
     5 0000013B 19260C26260C33260C- <2>
     5 00000144 3F260C00330C0C330C- <2>
     5 0000014D 19330C26330C33330C- <2>
     5 00000156 3F330C003F0C0C3F0C- <2>
     5 0000015F 193F0C263F0C333F0C- <2>
     5 00000168 3F3F0C0000190C0019- <2>
     5 00000171 190019260019330019- <2>
     5 0000017A 3F0019000C190C0C19- <2>
     5 00000183 190C19260C19330C19- <2>
     5 0000018C 3F0C190019190C1919- <2>
     5 00000195 191919261919331919- <2>
     5 0000019E 3F19190026190C2619- <2>
     5 000001A7 192619262619332619- <2>
     5 000001B0 3F26190033190C3319- <2>
     5 000001B9 193319263319333319- <2>
     5 000001C2 3F3319003F190C3F19- <2>
     5 000001CB 193F19263F19333F19- <2>
     5 000001D4 3F3F190000260C0026- <2>
     5 000001DD 190026260026330026- <2>
     5 000001E6 3F0026000C260C0C26- <2>
     5 000001EF 190C26260C26330C26- <2>
     5 000001F8 3F0C260019260C1926- <2>
     5 00000201 191926261926331926- <2>
     5 0000020A 3F19260026260C2626- <2>
     5 00000213 192626262626332626- <2>
     5 0000021C 3F26260033260C3326- <2>
     5 00000225 193326263326333326- <2>
     5 0000022E 3F3326003F260C3F26- <2>
     5 00000237 193F26263F26333F26- <2>
     5 00000240 3F3F260000330C0033- <2>
     5 00000249 190033260033330033- <2>
     5 00000252 3F0033000C330C0C33- <2>
     5 0000025B 190C33260C33330C33- <2>
     5 00000264 3F0C330019330C1933- <2>
     5 0000026D 191933261933331933- <2>
     5 00000276 3F19330026330C2633- <2>
     5 0000027F 192633262633332633- <2>
     5 00000288 3F26330033330C3333- <2>
     5 00000291 193333263333333333- <2>
     5 0000029A 3F3333003F330C3F33- <2>
     5 000002A3 193F33263F33333F33- <2>
     5 000002AC 3F3F3300003F0C003F- <2>
     5 000002B5 19003F26003F33003F- <2>
     5 000002BE 3F003F000C3F0C0C3F- <2>
     5 000002C7 190C3F260C3F330C3F- <2>
     5 000002D0 3F0C3F00193F0C193F- <2>
     5 000002D9 19193F26193F33193F- <2>
     5 000002E2 3F193F00263F0C263F- <2>
     5 000002EB 19263F26263F33263F- <2>
     5 000002F4 3F263F00333F0C333F- <2>
     5 000002FD 19333F26333F33333F- <2>
     5 00000306 3F333F003F3F0C3F3F- <2>
     5 0000030F 193F3F263F3F333F3F- <2>
     5 00000318 3F3F3F              <2>
     6                              <2> ; instructions
     7 0000031B 010102040406050609- <2> palette_data1: db 0x01, 0x01, 0x02, 0x04, 0x04, 0x06, 0x05, 0x06, 0x09, 0x09, 0x09, 0x0C, 0x0B, 0x0D, 0x14, 0x09, 0x0A, 0x12, 0x0A, 0x0D, 0x19, 0x06, 0x08, 0x0D, 0x09, 0x02, 0x0D, 0x05, 0x02, 0x09, 0x0B, 0x11, 0x1B, 0x0D, 0x02, 0x13, 0x12, 0x11, 0x13, 0x0D, 0x05, 0x13, 0x0D, 0x0D, 0x0E, 0x13, 0x32, 0x3A, 0x13, 0x05, 0x1A, 0x13, 0x35, 0x3C, 0x06, 0x09, 0x11, 0x13, 0x09, 0x1C, 0x0C, 0x19, 0x23, 0x1A, 0x19, 0x1A, 0x12, 0x2D, 0x35, 0x08, 0x06, 0x0B, 0x2A, 0x29, 0x2A, 0x12, 0x2A, 0x33, 0x0B, 0x15, 0x1C, 0x31, 0x1E, 0x3C, 0x35, 0x25, 0x3D, 0x25, 0x25, 0x26, 0x15, 0x15, 0x16, 0x33, 0x22, 0x3C, 0x22, 0x21, 0x22, 0x0B, 0x16, 0x22, 0x2D, 0x2D, 0x2D, 0x06, 0x0D, 0x13, 0x0C, 0x11, 0x16, 0x32, 0x31, 0x32, 0x13, 0x15, 0x1C, 0x1D, 0x1D, 0x1E, 0x0C, 0x1D, 0x24, 0x0E, 0x21, 0x2B, 0x1B, 0x09, 0x24, 0x35, 0x35, 0x35, 0x1A, 0x0D, 0x24, 0x12, 0x02, 0x1A, 0x0D, 0x1E, 0x29, 0x3D, 0x3D, 0x3E, 0x11, 0x12, 0x1A, 0x3A, 0x3A, 0x3A, 0x10, 0x02, 0x16, 0x0E, 0x25, 0x2D, 0x2E, 0x19, 0x3A, 0x2A, 0x16, 0x35, 0x11, 0x25, 0x2D, 0x36, 0x29, ...
     7 00000324 09090C0B0D14090A12- <2>
     7 0000032D 0A0D1906080D09020D- <2>
     7 00000336 0502090B111B0D0213- <2>
     7 0000033F 1211130D05130D0D0E- <2>
     7 00000348 13323A13051A13353C- <2>
     7 00000351 06091113091C0C1923- <2>
     7 0000035A 1A191A122D3508060B- <2>
     7 00000363 2A292A122A330B151C- <2>
     7 0000036C 311E3C35253D252526- <2>
     7 00000375 15151633223C222122- <2>
     7 0000037E 0B16222D2D2D060D13- <2>
     7 00000387 0C111632313213151C- <2>
     7 00000390 1D1D1E0C1D240E212B- <2>
     7 00000399 1B09243535351A0D24- <2>
     7 000003A2 12021A0D1E293D3D3E- <2>
     7 000003AB 11121A3A3A3A100216- <2>
     7 000003B4 0E252D2E193A2A1635- <2>
     7 000003BD 11252D36293C1D112B- <2>
     7 000003C6 2B19351419223A313D- <2>
     7 000003CF 0B191E10051623112D- <2>
     7 000003D8 231532392D3E11222B- <2>
     7 000003E1 210E2C122E38070E19- <2>
     7 000003EA 2612311430362C1D34- <2>
     7 000003F3 14383E112631382A3E- <2>
     7 000003FC 0E2933110E131D1E22- <2>
     7 00000405 07111B11292E362D3A- <2>
     7 0000040E 0E2126160D21301B3B- <2>
     7 00000417 121D251C1124071115- <2>
     7 00000420 24152C0D26312D2133- <2>
     7 00000429 0A1320140D1C1E0D29- <2>
     7 00000432 160A200E313A3B353D- <2>
     7 0000043B 221E2319161A100A15- <2>
     7 00000444 2A252B332D342B1639- <2>
     7 0000044D 111E292E2532190622- <2>
     7 00000456 0E2E392F1D390F2D36- <2>
     7 0000045F 29222C2626280E353C- <2>
     7 00000468 1216201E0A29312934- <2>
     7 00000471 25192C1606200B0B18- <2>
     7 0000047A 26212A363039251E2B- <2>
     7 00000483 050C0F281333201626- <2>
     7 0000048C 26153A2F2F301E1623- <2>
     7 00000495 19121D05071027123A- <2>
     7 0000049E 312536291D2D2F2931- <2>
     7 000004A7 1E192107141B0C1A28- <2>
     7 000004B0 221925240F31191E29- <2>
     7 000004B9 38263E1121261F142C- <2>
     7 000004C2 36373830233515181D- <2>
     7 000004CB 272829180A1F0F292E- <2>
     7 000004D4 0914170C2231190E1E- <2>
     7 000004DD 201127271930200B2B- <2>
     7 000004E6 060B182F3030102330- <2>
     7 000004EF 071621071321200F27- <2>
     7 000004F8 0F01191931381F2021- <2>
     7 00000501 07192318071E311F37- <2>
     7 0000050A 131B282C23380E2427- <2>
     7 00000513 1834391929322F2938- <2>
     7 0000051C 0806070D2B390F3137- <2>
     7 00000525 2828270F393C291B2F- <2>
     7 0000052E 2728272719380F0718- <2>
     7 00000537 122B38112C2F18383C- <2>
     7 00000540 182D341A202A071417- <2>
     7 00000549 171026373838000000- <2>
     7 00000552 000000000000000000- <2>
     7 0000055B 000000000000000000- <2>
     7 00000564 000000000000000000- <2>
     7 0000056D 000000000000000000- <2>
     7 00000576 000000000000000000- <2>
     7 0000057F 000000000000000000- <2>
     7 00000588 000000000000000000- <2>
     7 00000591 000000000000000000- <2>
     7 0000059A 000000000000000000- <2>
     7 000005A3 000000000000000000- <2>
     7 000005AC 000000000000000000- <2>
     7 000005B5 000000000000000000- <2>
     7 000005BE 000000000000000000- <2>
     7 000005C7 000000000000000000- <2>
     7 000005D0 000000000000000000- <2>
     7 000005D9 000000000000000000- <2>
     7 000005E2 000000000000000000- <2>
     7 000005EB 000000000000000000- <2>
     7 000005F4 000000000000000000- <2>
     7 000005FD 000000000000000000- <2>
     7 00000606 000000000000000000- <2>
     7 0000060F 000000000000000000- <2>
     7 00000618 000000              <2>
     8                              <2> 
     9                              <2> 
    10                              <2> ; background
    11 0000061B 06040909050C050406- <2> palette_data2: db 0x06, 0x04, 0x09, 0x09, 0x05, 0x0C, 0x05, 0x04, 0x06, 0x0D, 0x05, 0x12, 0x14, 0x09, 0x1B, 0x11, 0x06, 0x16, 0x04, 0x03, 0x05, 0x13, 0x07, 0x19, 0x0B, 0x09, 0x0C, 0x1B, 0x0A, 0x22, 0x0D, 0x09, 0x13, 0x1C, 0x0D, 0x23, 0x11, 0x09, 0x15, 0x19, 0x09, 0x1E, 0x24, 0x11, 0x2B, 0x05, 0x09, 0x0D, 0x11, 0x0D, 0x13, 0x23, 0x0E, 0x29, 0x05, 0x0D, 0x14, 0x15, 0x0D, 0x1C, 0x14, 0x11, 0x14, 0x24, 0x15, 0x2B, 0x1C, 0x11, 0x23, 0x21, 0x0D, 0x26, 0x05, 0x0A, 0x11, 0x0C, 0x0C, 0x12, 0x24, 0x19, 0x2B, 0x16, 0x0A, 0x21, 0x0E, 0x0C, 0x0E, 0x2C, 0x21, 0x33, 0x2D, 0x25, 0x33, 0x35, 0x31, 0x3B, 0x1D, 0x15, 0x24, 0x33, 0x2E, 0x39, 0x2B, 0x1D, 0x32, 0x29, 0x15, 0x2E, 0x28, 0x12, 0x2D, 0x19, 0x0D, 0x1E, 0x0A, 0x11, 0x1A, 0x22, 0x1E, 0x24, 0x1A, 0x15, 0x1B, 0x06, 0x11, 0x19, 0x2A, 0x19, 0x31, 0x1B, 0x19, 0x1D, 0x25, 0x1D, 0x2B, 0x21, 0x11, 0x26, 0x2A, 0x16, 0x30, 0x1A, 0x12, 0x1C, 0x36, 0x35, 0x3C, 0x2D, 0x29, 0x33, 0x0A, 0x15, 0x1D, 0x21, 0x0B, 0x25, 0x15, 0x11, 0x1A, 0x32, 0x2A, 0x39, 0x16, 0x0D, 0x21, 0x0C, 0x0D, ...
    11 00000624 0D051214091B110616- <2>
    11 0000062D 0403051307190B090C- <2>
    11 00000636 1B0A220D09131C0D23- <2>
    11 0000063F 11091519091E24112B- <2>
    11 00000648 05090D110D13230E29- <2>
    11 00000651 050D14150D1C141114- <2>
    11 0000065A 24152B1C1123210D26- <2>
    11 00000663 050A110C0C1224192B- <2>
    11 0000066C 160A210E0C0E2C2133- <2>
    11 00000675 2D253335313B1D1524- <2>
    11 0000067E 332E392B1D3229152E- <2>
    11 00000687 28122D190D1E0A111A- <2>
    11 00000690 221E241A151B061119- <2>
    11 00000699 2A19311B191D251D2B- <2>
    11 000006A2 2111262A16301A121C- <2>
    11 000006AB 36353C2D29330A151D- <2>
    11 000006B4 210B2515111A322A39- <2>
    11 000006BD 160D210C0D1A0E0919- <2>
    11 000006C6 26212B3129360B1922- <2>
    11 000006CF 1614161E1129221525- <2>
    11 000006D8 29192D302636051016- <2>
    11 000006E1 06151D1E0E2829212D- <2>
    11 000006EA 1D1923291E2D24353B- <2>
    11 000006F3 34393E211A25060309- <2>
    11 000006FC 2B363C131A230C1D25- <2>
    11 00000705 2A252D0F07180A1116- <2>
    11 0000070E 14151B0B222B18071C- <2>
    11 00000717 13152238393F232025- <2>
    11 00000720 1C3239312D361E1529- <2>
    11 00000729 132D361D1D2238363E- <2>
    11 00000732 0C162113222A132932- <2>
    11 0000073B 1B2E3526193014252D- <2>
    11 00000744 131D250C252D141122- <2>
    11 0000074D 2D383D0E2D36223239- <2>
    11 00000756 0C2A33312638261531- <2>
    11 0000075F 280E2A14313A2D2D34- <2>
    11 00000768 24252B1B212B1D1A29- <2>
    11 00000771 0D11211A2A320B2631- <2>
    11 0000077A 0719230B181F070611- <2>
    11 00000783 151D2B1B1D2B232A32- <2>
    11 0000078C 232E351C343C0A1E29- <2>
    11 00000795 261D301C21261C2531- <2>
    11 0000079E 0A030D142E382C3239- <2>
    11 000007A7 230B292A313622292E- <2>
    11 000007B0 2426321C252C242231- <2>
    11 000007B9 13191D0C0311050F18- <2>
    11 000007C2 061621302234233036- <2>
    11 000007CB 07212E3131362F2938- <2>
    11 000007D4 2A282E281131122631- <2>
    11 000007DD 071D25393C3F060C0F- <2>
    11 000007E6 353C3F132127153136- <2>
    11 000007EF 1B31370D20261A2F38- <2>
    11 000007F8 1E282E2B2F3A051E2B- <2>
    11 00000801 2F26382612300C0F21- <2>
    11 0000080A 19233006181F132A2F- <2>
    11 00000813 0E282E072330301E34- <2>
    11 0000081C 18131707252D151A29- <2>
    11 00000825 0724303023390F2F38- <2>
    11 0000082E 0F303813072138313E- <2>
    11 00000837 202F38090607100C0F- <2>
    11 00000840 18141717343C072027- <2>
    11 00000849 2D21381F0B28000000- <2>
    11 00000852 000000000000000000- <2>
    11 0000085B 000000000000000000- <2>
    11 00000864 000000000000000000- <2>
    11 0000086D 000000000000000000- <2>
    11 00000876 000000000000000000- <2>
    11 0000087F 000000000000000000- <2>
    11 00000888 000000000000000000- <2>
    11 00000891 000000000000000000- <2>
    11 0000089A 000000000000000000- <2>
    11 000008A3 000000000000000000- <2>
    11 000008AC 000000000000000000- <2>
    11 000008B5 000000000000000000- <2>
    11 000008BE 000000000000000000- <2>
    11 000008C7 000000000000000000- <2>
    11 000008D0 000000000000000000- <2>
    11 000008D9 000000000000000000- <2>
    11 000008E2 000000000000000000- <2>
    11 000008EB 000000000000000000- <2>
    11 000008F4 000000000000000000- <2>
    11 000008FD 000000000000000000- <2>
    11 00000906 000000000000000000- <2>
    11 0000090F 000000000000000000- <2>
    11 00000918 000000              <2>
    12                              <2> 
    13                              <2> ; escape
    14 0000091B 02020404060A030406- <2> palette_data3: db  0x02, 0x02, 0x04, 0x04, 0x06, 0x0A, 0x03, 0x04, 0x06, 0x05, 0x08, 0x0E, 0x06, 0x0A, 0x11, 0x06, 0x0D, 0x14, 0x0A, 0x0A, 0x13, 0x12, 0x0C, 0x19, 0x09, 0x11, 0x1B, 0x09, 0x0D, 0x14, 0x0B, 0x19, 0x23, 0x0A, 0x15, 0x1D, 0x09, 0x0E, 0x19, 0x03, 0x03, 0x08, 0x0A, 0x16, 0x21, 0x3E, 0x3E, 0x3E, 0x0A, 0x0B, 0x19, 0x07, 0x11, 0x1A, 0x06, 0x07, 0x10, 0x0D, 0x21, 0x2C, 0x12, 0x29, 0x33, 0x0C, 0x1E, 0x29, 0x07, 0x0E, 0x18, 0x0C, 0x1D, 0x26, 0x09, 0x09, 0x0D, 0x12, 0x22, 0x2B, 0x39, 0x3A, 0x3A, 0x0B, 0x10, 0x16, 0x13, 0x15, 0x1A, 0x11, 0x26, 0x31, 0x12, 0x25, 0x2E, 0x13, 0x19, 0x23, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0E, 0x26, 0x31, 0x12, 0x12, 0x1C, 0x19, 0x1A, 0x1D, 0x24, 0x25, 0x26, 0x11, 0x12, 0x15, 0x29, 0x29, 0x2B, 0x13, 0x1D, 0x25, 0x13, 0x2C, 0x36, 0x12, 0x16, 0x22, 0x25, 0x26, 0x29, 0x14, 0x2E, 0x38, 0x2D, 0x2D, 0x2E, 0x0E, 0x24, 0x2E, 0x13, 0x1E, 0x29, 0x1C, 0x1E, 0x21, 0x2E, 0x2E, 0x30, 0x1A, 0x2A, 0x32, 0x07, 0x10, 0x17, 0x1C, 0x1D, 0x1E, 0x21, 0x22, 0x24, 0x11, 0x0C, 0x16, 0x14, 0x1A,...
    14 00000924 05080E060A11060D14- <2>
    14 0000092D 0A0A13120C1909111B- <2>
    14 00000936 090D140B19230A151D- <2>
    14 0000093F 090E190303080A1621- <2>
    14 00000948 3E3E3E0A0B1907111A- <2>
    14 00000951 0607100D212C122933- <2>
    14 0000095A 0C1E29070E180C1D26- <2>
    14 00000963 09090D12222B393A3A- <2>
    14 0000096C 0B101613151A112631- <2>
    14 00000975 12252E131923313233- <2>
    14 0000097E 3435360E263112121C- <2>
    14 00000987 191A1D242526111215- <2>
    14 00000990 29292B131D25132C36- <2>
    14 00000999 121622252629142E38- <2>
    14 000009A2 2D2D2E0E242E131E29- <2>
    14 000009AB 1C1E212E2E301A2A32- <2>
    14 000009B4 0710171C1D1E212224- <2>
    14 000009BD 110C16141A2A141516- <2>
    14 000009C6 37383919252C08070D- <2>
    14 000009CF 0B12201E20230C0C0E- <2>
    14 000009D8 0C181E07141E0F2933- <2>
    14 000009E1 26282B36373814191D- <2>
    14 000009EA 0807112E303216313B- <2>
    14 000009F3 14122013202619212B- <2>
    14 000009FC 193139110B181B2D34- <2>
    14 00000A05 191E2B19282E110B16- <2>
    14 00000A0E 1A26300D23300E2027- <2>
    14 00000A17 302F32102B38050C0F- <2>
    14 00000A20 2F323C232931071924- <2>
    14 00000A29 1023300716210C1B28- <2>
    14 00000A32 1A1B22181A2A211F24- <2>
    14 00000A3B 2E34380F2C37140F20- <2>
    14 00000A44 32333B282A3628272A- <2>
    14 00000A4D 21263108040618343E- <2>
    14 00000A56 16282F17343C18161C- <2>
    14 00000A5F 373837000000000000- <2>
    14 00000A68 000000000000000000- <2>
    14 00000A71 000000000000000000- <2>
    14 00000A7A 000000000000000000- <2>
    14 00000A83 000000000000000000- <2>
    14 00000A8C 000000000000000000- <2>
    14 00000A95 000000000000000000- <2>
    14 00000A9E 000000000000000000- <2>
    14 00000AA7 000000000000000000- <2>
    14 00000AB0 000000000000000000- <2>
    14 00000AB9 000000000000000000- <2>
    14 00000AC2 000000000000000000- <2>
    14 00000ACB 000000000000000000- <2>
    14 00000AD4 000000000000000000- <2>
    14 00000ADD 000000000000000000- <2>
    14 00000AE6 000000000000000000- <2>
    14 00000AEF 000000000000000000- <2>
    14 00000AF8 000000000000000000- <2>
    14 00000B01 000000000000000000- <2>
    14 00000B0A 000000000000000000- <2>
    14 00000B13 000000000000000000- <2>
    14 00000B1C 000000000000000000- <2>
    14 00000B25 000000000000000000- <2>
    14 00000B2E 000000000000000000- <2>
    14 00000B37 000000000000000000- <2>
    14 00000B40 000000000000000000- <2>
    14 00000B49 000000000000000000- <2>
    14 00000B52 000000000000000000- <2>
    14 00000B5B 000000000000000000- <2>
    14 00000B64 000000000000000000- <2>
    14 00000B6D 000000000000000000- <2>
    14 00000B76 000000000000000000- <2>
    14 00000B7F 000000000000000000- <2>
    14 00000B88 000000000000000000- <2>
    14 00000B91 000000000000000000- <2>
    14 00000B9A 000000000000000000- <2>
    14 00000BA3 000000000000000000- <2>
    14 00000BAC 000000000000000000- <2>
    14 00000BB5 000000000000000000- <2>
    14 00000BBE 000000000000000000- <2>
    14 00000BC7 000000000000000000- <2>
    14 00000BD0 000000000000000000- <2>
    14 00000BD9 000000000000000000- <2>
    14 00000BE2 000000000000000000- <2>
    14 00000BEB 000000000000000000- <2>
    14 00000BF4 000000000000000000- <2>
    14 00000BFD 000000000000000000- <2>
    14 00000C06 000000000000000000- <2>
    14 00000C0F 000000000000000000- <2>
    14 00000C18 000000              <2>
    15                              <2> 
    16                              <2> ; end
    17 00000C1B 01010305050A0B0A12- <2> palette_data4: db 0x01, 0x01, 0x03, 0x05, 0x05, 0x0A, 0x0B, 0x0A, 0x12, 0x0D, 0x0D, 0x15, 0x04, 0x04, 0x07, 0x09, 0x08, 0x0D, 0x3F, 0x3F, 0x3F, 0x08, 0x07, 0x0D, 0x12, 0x12, 0x1A, 0x15, 0x15, 0x1D, 0x0A, 0x05, 0x05, 0x0E, 0x0D, 0x19, 0x18, 0x17, 0x1F, 0x10, 0x0E, 0x1A, 0x1B, 0x1D, 0x24, 0x24, 0x26, 0x2B, 0x12, 0x0A, 0x09, 0x15, 0x0D, 0x0B, 0x11, 0x11, 0x15, 0x2B, 0x2D, 0x32, 0x10, 0x0F, 0x16, 0x19, 0x19, 0x1C, 0x19, 0x19, 0x21, 0x08, 0x07, 0x10, 0x29, 0x2A, 0x2C, 0x04, 0x03, 0x08, 0x0E, 0x11, 0x19, 0x31, 0x32, 0x34, 0x39, 0x39, 0x39, 0x0E, 0x08, 0x07, 0x35, 0x35, 0x35, 0x21, 0x22, 0x24, 0x26, 0x28, 0x2E, 0x07, 0x08, 0x0C, 0x16, 0x19, 0x21, 0x1E, 0x21, 0x29, 0x0E, 0x10, 0x16, 0x2E, 0x31, 0x35, 0x34, 0x36, 0x39, 0x25, 0x25, 0x26, 0x19, 0x0E, 0x0B, 0x29, 0x2B, 0x30, 0x2D, 0x2D, 0x2E, 0x21, 0x23, 0x29, 0x1C, 0x11, 0x0E, 0x15, 0x15, 0x16, 0x1E, 0x20, 0x26, 0x0D, 0x0D, 0x0E, 0x1D, 0x1D, 0x1E, 0x16, 0x18, 0x1E, 0x10, 0x09, 0x07, 0x22, 0x15, 0x11, 0x26, 0x29, 0x30, 0x1A, 0x1F, 0x28, 0x08, 0x03, 0x02, 0x14, 0x17, ...
    17 00000C24 0D0D1504040709080D- <2>
    17 00000C2D 3F3F3F08070D12121A- <2>
    17 00000C36 15151D0A05050E0D19- <2>
    17 00000C3F 18171F100E1A1B1D24- <2>
    17 00000C48 24262B120A09150D0B- <2>
    17 00000C51 1111152B2D32100F16- <2>
    17 00000C5A 19191C191921080710- <2>
    17 00000C63 292A2C0403080E1119- <2>
    17 00000C6C 3132343939390E0807- <2>
    17 00000C75 35353521222426282E- <2>
    17 00000C7E 07080C1619211E2129- <2>
    17 00000C87 0E10162E3135343639- <2>
    17 00000C90 252526190E0B292B30- <2>
    17 00000C99 2D2D2E2123291C110E- <2>
    17 00000CA2 1515161E20260D0D0E- <2>
    17 00000CAB 1D1D1E16181E100907- <2>
    17 00000CB4 2215112629301A1F28- <2>
    17 00000CBD 080302141720191720- <2>
    17 00000CC6 1E131036383B313338- <2>
    17 00000CCF 0D0B18201F232E3138- <2>
    17 00000CD8 201310171C25282729- <2>
    17 00000CE1 302F3120130F1A1516- <2>
    17 00000CEA 231D1F272730272C32- <2>
    17 00000CF3 2F302F373837070B10- <2>
    17 00000CFC 383837383738070807- <2>
    17 00000D05 000000000000000000- <2>
    17 00000D0E 000000000000000000- <2>
    17 00000D17 000000000000000000- <2>
    17 00000D20 000000000000000000- <2>
    17 00000D29 000000000000000000- <2>
    17 00000D32 000000000000000000- <2>
    17 00000D3B 000000000000000000- <2>
    17 00000D44 000000000000000000- <2>
    17 00000D4D 000000000000000000- <2>
    17 00000D56 000000000000000000- <2>
    17 00000D5F 000000000000000000- <2>
    17 00000D68 000000000000000000- <2>
    17 00000D71 000000000000000000- <2>
    17 00000D7A 000000000000000000- <2>
    17 00000D83 000000000000000000- <2>
    17 00000D8C 000000000000000000- <2>
    17 00000D95 000000000000000000- <2>
    17 00000D9E 000000000000000000- <2>
    17 00000DA7 000000000000000000- <2>
    17 00000DB0 000000000000000000- <2>
    17 00000DB9 000000000000000000- <2>
    17 00000DC2 000000000000000000- <2>
    17 00000DCB 000000000000000000- <2>
    17 00000DD4 000000000000000000- <2>
    17 00000DDD 000000000000000000- <2>
    17 00000DE6 000000000000000000- <2>
    17 00000DEF 000000000000000000- <2>
    17 00000DF8 000000000000000000- <2>
    17 00000E01 000000000000000000- <2>
    17 00000E0A 000000000000000000- <2>
    17 00000E13 000000000000000000- <2>
    17 00000E1C 000000000000000000- <2>
    17 00000E25 000000000000000000- <2>
    17 00000E2E 000000000000000000- <2>
    17 00000E37 000000000000000000- <2>
    17 00000E40 000000000000000000- <2>
    17 00000E49 000000000000000000- <2>
    17 00000E52 000000000000000000- <2>
    17 00000E5B 000000000000000000- <2>
    17 00000E64 000000000000000000- <2>
    17 00000E6D 000000000000000000- <2>
    17 00000E76 000000000000000000- <2>
    17 00000E7F 000000000000000000- <2>
    17 00000E88 000000000000000000- <2>
    17 00000E91 000000000000000000- <2>
    17 00000E9A 000000000000000000- <2>
    17 00000EA3 000000000000000000- <2>
    17 00000EAC 000000000000000000- <2>
    17 00000EB5 000000000000000000- <2>
    17 00000EBE 000000000000000000- <2>
    17 00000EC7 000000000000000000- <2>
    17 00000ED0 000000000000000000- <2>
    17 00000ED9 000000000000000000- <2>
    17 00000EE2 000000000000000000- <2>
    17 00000EEB 000000000000000000- <2>
    17 00000EF4 000000000000000000- <2>
    17 00000EFD 000000000000000000- <2>
    17 00000F06 000000000000000000- <2>
    17 00000F0F 000000000000000000- <2>
    17 00000F18 000000              <2>
    18                              <2> 
    19                              <2> 
    20 00000F1B 55                  <2> set_palette1:                push bp
    21 00000F1C 89E5                <2>                             mov bp, sp
    22                              <2> 
    23 00000F1E BAC803              <2>                             mov dx, 0x3C8       ; DAC write index register
    24 00000F21 30C0                <2>                             xor al, al          ; Start with color index 0
    25 00000F23 EE                  <2>                             out dx, al
    26                              <2> 
    27 00000F24 8B5E04              <2>                             mov bx, [bp+4]
    28 00000F27 83FB00              <2>                             cmp bx, 0
    29 00000F2A 7505                <2>                             jne is1
    30 00000F2C BE[7500]            <2>                             mov si, palette_data0
    31 00000F2F EB28                <2>                             jmp write_to_port
    32                              <2> 
    33 00000F31 83FB01              <2>      is1:                   cmp bx, 1
    34 00000F34 7505                <2>                             jne is2
    35 00000F36 BE[1B03]            <2>                             mov si, palette_data1
    36 00000F39 EB1E                <2>                             jmp write_to_port
    37                              <2> 
    38 00000F3B 83FB02              <2>      is2:                   cmp bx, 2
    39 00000F3E 7505                <2>                             jne is3
    40 00000F40 BE[1B06]            <2>                             mov si, palette_data2
    41 00000F43 EB14                <2>                             jmp write_to_port
    42                              <2> 
    43 00000F45 83FB03              <2>      is3:                   cmp bx, 3
    44 00000F48 7505                <2>                             jne is4
    45 00000F4A BE[1B09]            <2>                             mov si, palette_data3
    46 00000F4D EB0A                <2>                             jmp write_to_port
    47                              <2> 
    48 00000F4F 83FB04              <2>      is4:                   cmp bx, 4
    49 00000F52 7505                <2>                             jne write_to_port
    50 00000F54 BE[1B0C]            <2>                             mov si, palette_data4
    51 00000F57 EB00                <2>                             jmp write_to_port                           
    52                              <2> 
    53 00000F59 B90003              <2>     write_to_port:          mov cx, 768         ; 256 colors * 3 components
    54 00000F5C BAC903              <2>                             mov dx, 0x3C9       ; DAC data register
    55                              <2>                             
    56 00000F5F F36E                <2>                             rep outsb           ; Output 768 bytes from ds:si to port dx
    57                              <2> 
    58 00000F61 89EC                <2>                             mov sp, bp
    59 00000F63 5D                  <2>                             pop bp 
    60 00000F64 C20200              <2>                             ret 2
    61                              <2> 
    62                              <2> %endif
    66                              <1> %include "clrscr.asm"
     1                              <2> %ifndef clrscr_asm
     2                              <2> %define clrscr_asm
     3                              <2> 
     4 00000F67 55                  <2> clrscr:         push bp
     5 00000F68 89E5                <2>                 mov bp, sp
     6                              <2>                 
     7 00000F6A 50                  <2>                 push ax
     8 00000F6B 51                  <2>                 push cx
     9                              <2> 
    10 00000F6C 06                  <2>                 push es
    11                              <2> 
    12 00000F6D 57                  <2>                 push di
    13                              <2> 
    14 00000F6E C47E04              <2>                 les di, [bp+4]
    15                              <2> 
    16 00000F71 8B460A              <2>                 mov ax, [bp+10]
    17 00000F74 8B4E08              <2>                 mov cx, [bp+8]
    18 00000F77 D1E9                <2>                 shr cx, 1
    19                              <2> 
    20 00000F79 FC                  <2>                 cld
    21 00000F7A F3AB                <2>                 rep stosw
    22                              <2> 
    23 00000F7C 5F                  <2>                 pop di
    24                              <2> 
    25 00000F7D 07                  <2>                 pop es
    26                              <2> 
    27 00000F7E 59                  <2>                 pop cx
    28 00000F7F 58                  <2>                 pop ax
    29                              <2> 
    30 00000F80 5D                  <2>                 pop bp
    31                              <2> 
    32 00000F81 C20800              <2>                 ret 8
    33                              <2> 
    34                              <2> %endif
    67                              <1> %include "printPillars.asm"
     1                              <2> %ifndef printPillars_asm
     2                              <2> %define printPillars_asm
     3                              <2> 
     4                              <2> %include "printRect.asm"
     1                              <3> %ifndef printRect_asm
     2                              <3> %define printRect_asm
     3                              <3> 
     4                              <3> printRect:	
     5 00000F84 55                  <3>                 push bp
     6 00000F85 89E5                <3> 		        mov bp, sp
     7                              <3> 
     8 00000F87 60                  <3> 		        pusha
     9 00000F88 06                  <3> 		        push es
    10                              <3> 
    11 00000F89 8B4604              <3> 		        mov ax, [bp+4]              ; segment = 0xA000
    12 00000F8C 8EC0                <3> 		        mov es, ax		
    13                              <3> 
    14 00000F8E 8B5608              <3> 		        mov dx, [bp+8]              ; x = 0 and 48
    15 00000F91 8B460A              <3> 		        mov ax, [bp+10]             ; columns per row = 320
    16 00000F94 F7E2                <3> 		        mul dx
    17 00000F96 8B5606              <3>                 mov dx, [bp+6]              ; y = 260
    18 00000F99 01D0                <3> 		        add ax, dx
    19 00000F9B 89C2                <3> 		        mov dx, ax
    20                              <3> 
    21 00000F9D FC                  <3> 		        cld
    22                              <3> 
    23 00000F9E 8B460C              <3> 		        mov ax, [bp+12]             ; attribute = 0x04
    24 00000FA1 8B5E10              <3> 		        mov bx, [bp+16]             ; rectangle height = 72
    25                              <3> 
    26                              <3> loop1:	        	
    27 00000FA4 03560A              <3> 		        add dx, [bp+10]
    28 00000FA7 89D7                <3>                 mov di, dx                  ; columns per row = 320
    29 00000FA9 8B4E0E              <3> 		        mov cx, [bp+14]             ; rectangle width = 30
    30                              <3> 
    31 00000FAC F3AA                <3> 		        rep stosb
    32                              <3> 
    33 00000FAE 83EB01              <3> 		        sub bx, 1
    34 00000FB1 75F1                <3> 		        jnz loop1
    35                              <3> 
    36 00000FB3 07                  <3> 		        pop es
    37 00000FB4 61                  <3> 		        popa
    38 00000FB5 5D                  <3> 		        pop bp
    39 00000FB6 C20E00              <3> 		        ret 14
    40                              <3> 
    41                              <3> %endif
     5                              <2> ;%include "rand.asm"
     6                              <2> 
     7 00000FB9 55                  <2> printPillars:               push bp
     8 00000FBA 89E5                <2>                             mov bp, sp
     9                              <2> 
    10 00000FBC 60                  <2>                             pushA
    11 00000FBD 06                  <2>                             push ES
    12                              <2>                             
    13 00000FBE 8B5E10              <2>                             mov bx, [bp+16]                 ; current pillar height
    14 00000FC1 31FF                <2>                             xor di, di
    15                              <2>                            
    16                              <2>      loop_pillars:          
    17 00000FC3 FF37                <2>                             push word [bx]                  ; rectangle height 
    18                              <2>                             
    19 00000FC5 FF760E              <2>                             push word [bp+14]               ; rectangle width = 20
    20 00000FC8 FF760C              <2>                             push word [bp+12]               ; attribute (color)
    21 00000FCB FF760A              <2>                             push word [bp+10]               ; columns = 320
    22 00000FCE FF7608              <2>                             push word [bp+8]                ; x = 0
    23 00000FD1 037E06              <2>                             add di, [bp+6]
    24 00000FD4 8B05                <2>                             mov ax, [di]  
    25 00000FD6 50                  <2>                             push ax                         ; rectangle_y
    26 00000FD7 FF7604              <2>                             push word [bp+4]                ; es = 0xA000
    27 00000FDA E8A7FF              <2>                             call printRect  
    28                              <2> 
    29 00000FDD 8B4612              <2>                             mov ax, [bp+18]                 ; total height = 200
    30 00000FE0 8B17                <2>                             mov dx, [bx]                    ; first pillar height 
    31 00000FE2 29D0                <2>                             sub ax, dx                      ; total height - first pillar height
    32 00000FE4 8B5614              <2>                             mov dx, [bp+20]                 ; space between pillars = 70
    33 00000FE7 29D0                <2>                             sub ax, dx  
    34 00000FE9 8B5616              <2>                             mov dx, [bp+22]                 ; grass height = 10
    35 00000FEC 29D0                <2>                             sub ax, dx  
    36                              <2> 
    37 00000FEE 8B0F                <2>                             mov cx, [bx]                    ; first pillar height 
    38 00000FF0 034E14              <2>                             add cx, [bp+20]                 ; space between pillars + first pillar height
    39                              <2> 
    40 00000FF3 50                  <2>                             push ax                         ; rectangle height
    41 00000FF4 FF760E              <2>                             push word [bp+14]               ; rectangle width
    42 00000FF7 FF760C              <2>                             push word [bp+12]               ; attribute (color)
    43 00000FFA FF760A              <2>                             push word [bp+10]               ; columns = 320
    44 00000FFD 51                  <2>                             push cx
    45 00000FFE 3EFF35              <2>                             push word [DS:di]               ; y
    46 00001001 FF7604              <2>                             push word [bp+4]                ; es = 0xA000
    47 00001004 E87DFF              <2>                             call printRect
    48                              <2> 
    49 00001007 83C302              <2>                             add bx, 2
    50 0000100A 2B7E06              <2>                             sub di, [bp+6]
    51 0000100D 83C702              <2>                             add di, 2
    52 00001010 8B7618              <2>                             mov si, [bp+24]
    53 00001013 D1E6                <2>                             shl si, 1
    54 00001015 39F7                <2>                             cmp di, si
    55 00001017 75AA                <2>                             jnz loop_pillars
    56                              <2> 
    57 00001019 07                  <2>                             pop ES
    58 0000101A 61                  <2>                             popA
    59 0000101B 5D                  <2>                             pop bp
    60                              <2> 
    61 0000101C C21600              <2>                             ret 22
    62                              <2> 
    63                              <2> %endif
    68                              <1> %include "printGrass.asm"
     1                              <2> %ifndef printGrass_asm
     2                              <2> %define printGrass_asm
     3                              <2> 
     4                              <2> grass:
     5 0000101F 55                  <2>                     push bp
     6 00001020 89E5                <2>                     mov bp, sp
     7                              <2> 
     8 00001022 50                  <2>                     push ax
     9 00001023 53                  <2>                     push bx
    10 00001024 51                  <2>                     push cx
    11 00001025 57                  <2>                     push di
    12 00001026 06                  <2>                     push es
    13                              <2> 
    14 00001027 8B4604              <2>                     mov ax, [bp+4]
    15 0000102A 8EC0                <2>                     mov es, ax          ; es = 0xa000
    16 0000102C 8B4606              <2>                     mov ax, [bp+6]      ; columns in each row
    17 0000102F F76608              <2>                     mul word[bp+8]      ; for finding the address to start printing grass from
    18                              <2> 
    19 00001032 89C7                <2>                     mov di, ax          ; 194*320 = 62,080  
    20 00001034 8B4E0A              <2>                     mov cx, [bp+10]     ; 320*200 = 64,000
    21 00001037 29C1                <2>                     sub cx, ax          ; 64,000-62,080 = 1920
    22                              <2> 
    23 00001039 FC                  <2>                     cld
    24                              <2> 
    25                              <2>                     ; Loop to draw random patches
    26                              <2> draw_grass:
    27                              <2>                     ; Generate a random color (0x02 for green, 0x06 for brown)
    28                              <2>                     ; Alternate between brown and green patches using bx
    29 0000103A BB0300              <2>                     mov bx, 3           ; arbitrary divisor to create pseudo-random effect
    30 0000103D F7F3                <2>                     div bx              ; pseudo-randomize AL based on division by BX
    31 0000103F 83FA00              <2>                     cmp dx, 0
    32 00001042 7404                <2>                     je texture       ; if dx = 0, use brown
    33 00001044 B002                <2>                     mov al, 0x02        ; green
    34 00001046 EB02                <2>                     jmp store_pixel
    35                              <2> texture:
    36 00001048 B00E                <2>                     mov al, 0x0e       
    37                              <2> store_pixel:
    38 0000104A AA                  <2>                     stosb               ; store byte in es:[di] and advance di
    39 0000104B E2ED                <2>                     loop draw_grass     ; repeat for each pixel
    40                              <2> 
    41 0000104D 07                  <2>                     pop es
    42 0000104E 5F                  <2>                     pop di
    43 0000104F 59                  <2>                     pop cx
    44 00001050 5B                  <2>                     pop bx
    45 00001051 58                  <2>                     pop ax
    46 00001052 5D                  <2>                     pop bp
    47                              <2> 
    48 00001053 C20A00              <2>                     ret 10
    49                              <2> 
    50                              <2> %endif
    69                              <1> %include "batt.asm"
     1                              <2> 
     2                              <2> %ifndef batt_asm
     3                              <2> %define batt_asm
     4                              <2> %include "moveBird.asm"
     1                              <3> ; %ifndef moveBird_asm
     2                              <3> ; %define moveBird_asm
     3                              <3> 
     4                              <3> 
     5                              <3> 
     6                              <3> ; moveBird:                   push bp
     7                              <3>                             ; mov bp, sp
     8                              <3> 
     9                              <3>                             ; pushA
    10                              <3>                             ; mov bx, [bp+4]          ; bird y
    11                              <3>                             ; mov si, [bp+6]          ; bird flag address
    12                              <3> 
    13                              <3>                             ; cmp byte [si], 'U'
    14                              <3>                             ; je moveUp
    15                              <3>                             ; cmp word [bx], 180
    16                              <3>                             ; ja exit 
    17                              <3>                             ; inc word [bx]
    18                              <3>                             ; jmp exit
    19                              <3> 
    20                              <3>         ; moveUp:             cmp word [bx], 3
    21                              <3>                             ; jbe exit
    22                              <3>                             ; sub word [bx], 3
    23                              <3>                             
    24                              <3>         ; exit:               popA
    25                              <3>                             ; mov sp, bp
    26                              <3>                             ; pop bp
    27                              <3>                             ; ret 4
    28                              <3> 
    29                              <3> 							
    30                              <3> 							
    31                              <3> ; moveBirddown:
    32                              <3>     ; push bp
    33                              <3>     ; mov bp, sp
    34                              <3>     ; pusha
    35                              <3>     ; mov bx, [bp+4]          ; bird y position
    36                              <3> 
    37                              <3> ; check_ground:
    38                              <3>     ; cmp word [bx], 180      ; Check if bird is already at the ground
    39                              <3>     ; ja exittt               ; If yes, exit
    40                              <3> 
    41                              <3>     ; add word [bx], 1        ; Move the bird down by 1
    42                              <3>     ; cmp word [bx], 180      ; Check again if the bird has reached the ground
    43                              <3>     ; jne check_ground        ; If not, continue moving down
    44                              <3> 
    45                              <3> 
    46                              <3> ; exittt:
    47                              <3>     ; popa
    48                              <3>     ; mov sp, bp
    49                              <3>     ; pop bp
    50                              <3>     ; ret 2
    51                              <3> 
    52                              <3> ; collisioncheck:
    53                              <3>     ; push bp
    54                              <3>     ; mov bp, sp
    55                              <3>     ; pusha
    56                              <3>     ; mov di, [bp+4]
    57                              <3>     ; mov si, [bp+6]
    58                              <3>     ; mov bx, [bp+8]
    59                              <3> 
    60                              <3>     ; cmp byte [es:di], 0x07  ; Check if the pixel is background (0x07)
    61                              <3>     ; je collision            ; If yes, handle collision
    62                              <3> 
    63                              <3>         
    64                              <3>    ; jmp exitt
    65                              <3> 
    66                              <3> ; collision:
    67                              <3>     ; mov byte [si], 'D'      ; Set flag to 'D' (for moving down)
    68                              <3>     ; push bx                 ; Push bird's position
    69                              <3>     ; call moveBirddown 
    70                              <3>     
    71                              <3> ; jmp exitt
    72                              <3>              
    73                              <3> 
    74                              <3> ; exitt:
    75                              <3>     ; popa
    76                              <3>     ; mov sp, bp
    77                              <3>     ; pop bp
    78                              <3>     ; ret 6
    79                              <3> 	
    80                              <3> 	
    81                              <3> ; %endif
    82                              <3> %ifndef moveBird_asm
    83                              <3> %define moveBird_asm
    84                              <3> 
    85                              <3> moveBird:                   push bp
    86                              <3>                             mov bp, sp
    87                              <3> 
    88                              <3>                             pushA
    89                              <3>                             mov bx, [bp+4]          ; bird y
    90                              <3>                             mov si, [bp+6]          ; bird flag address
    91                              <3> 
    92                              <3>                             cmp byte [si], 'U'
    93                              <3>                             je moveUp
    94                              <3>                             cmp byte [si], 'W'
    95                              <3>                             je exit
    96                              <3>                             cmp word [bx], 180  ;terminationnnnnnnnnnnnnnn
    97                              <3>                             ja exit 
    98                              <3>                             inc word [bx]
    99                              <3>                             jmp exit
   100                              <3> 
   101                              <3>         moveUp:             cmp word [bx], 3
   102                              <3>                             jbe exit
   103                              <3>                             sub word [bx], 3
   104                              <3>                             mov byte [si], 'W'
   105                              <3>                             
   106                              <3>         exit:               popA
   107                              <3>                             mov sp, bp
   108                              <3>                             pop bp
   109                              <3>                             ret 4
   110                              <3> 							moveBirddown:
   111                              <3>     push bp
   112                              <3>     mov bp, sp
   113                              <3>     pusha
   114                              <3>     mov bx, [bp+4]          ; bird y position
   115                              <3> 
   116                              <3> check_ground:
   117                              <3>     cmp word [bx], 180      ; Check if bird is already at the ground
   118                              <3>     ja exittt               ; If yes, exit
   119                              <3> 
   120                              <3>     add word [bx], 1        ; Move the bird down by 1
   121                              <3>     cmp word [bx], 180      ; Check again if the bird has reached the ground
   122                              <3>     jne check_ground        ; If not, continue moving down
   123                              <3> 
   124                              <3> 
   125                              <3> exittt:
   126                              <3>     popa
   127                              <3>     mov sp, bp
   128                              <3>     pop bp
   129                              <3>     ret 2
   130                              <3> 
   131                              <3> collisioncheck:
   132                              <3>     push bp
   133                              <3>     mov bp, sp
   134                              <3>     pusha
   135                              <3>     mov di, [bp+4]
   136                              <3>    ; mov si, [bp+6]
   137                              <3>     mov bx, [bp+6]
   138                              <3> 
   139                              <3>     cmp byte [es:di], 0x00 ; Check if the pixel is background (0x07)
   140                              <3>     je collision            ; If yes, handle collision
   141                              <3> 
   142                              <3>         
   143                              <3>    jmp exitt
   144                              <3> 
   145                              <3> collision:
   146                              <3> ;      ; Set flag to 'D' (for moving down)
   147                              <3>     push bx                 ; Push bird's position
   148                              <3>     call moveBirddown 
   149                              <3>     
   150                              <3> jmp exitt
   151                              <3>              
   152                              <3> 
   153                              <3> exitt:
   154                              <3>     popa
   155                              <3>     mov sp, bp
   156                              <3>     pop bp
   157                              <3>     ret 4
   158                              <3> %endif
     5                              <2> printBirdy: 
     6 00001056 55                  <2>     push bp
     7 00001057 89E5                <2>     mov bp, sp
     8 00001059 60                  <2>     pusha
     9                              <2> 
    10 0000105A B800A0              <2>     mov ax, 0xA000       ; Set VGA segment
    11 0000105D 8EC0                <2>     mov es, ax
    12                              <2> 
    13 0000105F 8B5E08              <2>     mov bx, [bp+8]          ; row number (address)
    14 00001062 8B07                <2>     mov ax, [bx]    
    15 00001064 BE4001              <2>     mov si, 320	
    16 00001067 F7E6                <2>     mul si      
    17 00001069 8B5E06              <2>     mov bx, [bp+6]          ; column number (value)
    18 0000106C 01D8                <2>     add ax, bx        
    19 0000106E 89C2                <2>     mov dx, ax     
    20 00001070 89D7                <2> mov di,dx
    21 00001072 83C709              <2> add di,9
    22 00001075 81EF8002            <2> sub di,640
    23 00001079 26C60500            <2> mov byte [es:di],0x00	
    24 0000107D 8B4604              <2>     mov ax, [bp+4]         ; attribute = 0x00
    25 00001080 BB0900              <2>     mov bx, 9         ; Start with the widest width at the top
    26                              <2>     ; add dx, 350
    27 00001083 83C21E              <2>     add dx, 30
    28                              <2> 	
    29                              <2> 	
    30                              <2> triangle_top:
    31                              <2> 
    32 00001086 89D7                <2>     mov di, dx
    33                              <2> 	
    34 00001088 FF7608              <2> 	push word[bp+8]
    35                              <2> 
    36 0000108B 57                  <2> 	push di
    37 0000108C E8CBEF              <2> 	call collisioncheck
    38                              <2> 
    39 0000108F 89D9                <2>     mov cx, bx
    40 00001091 29CF                <2>     sub di, cx
    41                              <2> 	
    42 00001093 26C60502            <2> mov byte [es:di],0x02
    43 00001097 FF7608              <2> push word [bp+8]
    44                              <2> 
    45 0000109A 57                  <2> push di
    46                              <2> 
    47 0000109B E8BCEF              <2> call collisioncheck
    48 0000109E F3AA                <2>     rep stosb            ; Draw left side of the row
    49                              <2> 
    50                              <2>     ;mov cx, bx
    51 000010A0 01CF                <2>     add di, cx
    52                              <2> 	
    53 000010A2 89D9                <2>     mov cx, bx
    54 000010A4 FF7608              <2> 	push word[bp+8]
    55                              <2> 	
    56 000010A7 57                  <2> 	push di
    57 000010A8 E8AFEF              <2> 	call collisioncheck
    58 000010AB F3AA                <2>     rep stosb            ; Draw right side of the row
    59                              <2> 
    60 000010AD 81C24001            <2>     add dx, 320          
    61 000010B1 83EB01              <2>     sub bx, 1  
    62                              <2> 
    63                              <2> ; mov ax,di
    64                              <2> ; push ax
    65                              <2> ; call collisioncheck
    66 000010B4 7FD0                <2>     jg triangle_top
    67                              <2> ;rectangles are called from here on
    68 000010B6 8B5E08              <2>     mov bx, [bp+8]
    69 000010B9 8B07                <2>     mov ax, [bx]    
    70 000010BB BE4001              <2>     mov si,320 
    71 000010BE F7E6                <2>     mul si     
    72                              <2>          
    73 000010C0 2DB004              <2>     sub ax, 1200
    74                              <2> 
    75 000010C3 50                  <2>     push ax              
    76                              <2> 
    77 000010C4 BB0A00              <2>     mov bx, 10       ;len
    78                              <2> 	
    79 000010C7 B90800              <2>     mov cx, 8   ;width
    80                              <2> 	;rectangles are called (hard coded hein accordingly mujhay khud bhool gaya he mein ne 2 sal pehlay idhr kya kiya tha)
    81 000010CA 2D8007              <2>     sub ax,1920
    82 000010CD 83E801              <2>     sub ax,1
    83                              <2> 
    84 000010D0 E84000              <2>     call drawRectangle   ; Draw the left rectangle
    85                              <2> 
    86 000010D3 58                  <2>     pop ax               
    87 000010D4 83C008              <2>     add ax, 8        
    88 000010D7 50                  <2>     push ax              
    89 000010D8 2D8202              <2>     sub ax,642
    90                              <2> 
    91 000010DB BB0800              <2>     mov bx, 8            
    92 000010DE B90700              <2>     mov cx, 7  
    93                              <2> 
    94 000010E1 E82F00              <2>     call drawRectangle  ;bottom left
    95                              <2> 
    96                              <2>     ; 
    97 000010E4 58                  <2>     pop ax              
    98 000010E5 2D4001              <2>     sub ax, 320        
    99 000010E8 83C012              <2>     add ax, 18          
   100 000010EB 50                  <2>     push ax              
   101                              <2> 
   102 000010EC BB0800              <2>     mov bx, 8          
   103 000010EF B90700              <2>     mov cx, 7    
   104                              <2> 
   105 000010F2 E81E00              <2>     call drawRectangle   ;bottom right
   106                              <2> 
   107                              <2>     ;
   108 000010F5 58                  <2>     pop ax               
   109 000010F6 2D4006              <2>     sub ax, 1600       
   110 000010F9 83C005              <2>     add ax, 5            
   111 000010FC 50                  <2>     push ax              
   112                              <2> 
   113 000010FD BB0A00              <2>     mov bx, 10          
   114 00001100 B90800              <2>     mov cx, 8   
   115                              <2> 	
   116 00001103 E80D00              <2>     call drawRectangle 
   117 00001106 B8000A              <2> mov ax,0x0A00
   118 00001109 8EC0                <2> mov es,ax	
   119                              <2> ;mov byte [es:27275],0x00
   120                              <2> ;mov byte[es:2],0x00	;  top-right rectangle
   121 0000110B 58                  <2>     pop ax
   122 0000110C 61                  <2>     popa
   123 0000110D 89EC                <2>     mov sp, bp
   124 0000110F 5D                  <2>     pop bp
   125 00001110 C20600              <2>     ret 6
   126                              <2> 
   127                              <2> drawRectangle:
   128                              <2>     ; Parameters: ax = starting address, bx = width, cx = height
   129 00001113 52                  <2>     push dx
   130 00001114 57                  <2>     push di
   131 00001115 8B7604              <2> 	mov si,[bp+4]
   132 00001118 89CA                <2>     mov dx, cx            ; Save height in dx, so cx isnâ€™t restored each row
   133                              <2> drawRectangleLoopY:
   134 0000111A 89C7                <2>     mov di, ax            ; Set DI to starting address of the current row
   135                              <2> 
   136                              <2>     ; Place a white pixel (0x0F) at the starting position
   137 0000111C 26C6050E            <2>     mov byte [es:di], 0x0e
   138 00001120 47                  <2>     inc di  
   139 00001121 50                  <2> 	push ax
   140                              <2> 
   141 00001122 57                  <2> push di	; Move to the next pixel
   142 00001123 E834EF              <2> call collisioncheck
   143                              <2>     ; Now draw the rest of the row
   144 00001126 89D9                <2>     mov cx, bx            ; Rectangle width
   145 00001128 49                  <2>     dec cx                ; Decrement width by 1 to account for the already placed white pixel
   146                              <2> drawRectangleLoopX:
   147 00001129 26C60500            <2>     mov byte [es:di], 0x00 ; Draw rectangle body in light color (0x04)
   148 0000112D 47                  <2>     inc di
   149 0000112E E2F9                <2>     loop drawRectangleLoopX
   150                              <2> 	  ;mov byte [es:di], 0x0e
   151                              <2> 	 
   152 00001130 50                  <2> 	 push ax
   153                              <2> 
   154 00001131 57                  <2> push di
   155 00001132 E825EF              <2> call collisioncheck
   156 00001135 054001              <2>     add ax, 320           ; Move to the next row
   157 00001138 4A                  <2>     dec dx                ; Decrement height counter
   158 00001139 75DF                <2>     jnz drawRectangleLoopY ; Repeat for all rows
   159 0000113B 5F                  <2>     pop di
   160 0000113C 5A                  <2>     pop dx
   161 0000113D C3                  <2>     ret 
   162                              <2> 
   163                              <2> ; collisioncheck:
   164                              <2>     ; push bp
   165                              <2>     ; mov bp, sp
   166                              <2>     ; pusha
   167                              <2>  ; mov di,[bp+4]
   168                              <2>  ; mov si,[bp+6]
   169                              <2>  ; mov bx,[bp+8]
   170                              <2>  ; cmp byte [es:di],0x07
   171                              <2>    
   172                              <2>     ; je collision 
   173                              <2> 
   174                              <2> ; exitt:
   175                              <2>     ; popa
   176                              <2>     ; pop bp
   177                              <2>     ; ret 6               ; Return, clean stack
   178                              <2> 
   179                              <2> ; collision:
   180                              <2>   
   181                              <2>    ; push si
   182                              <2>    ; push bx
   183                              <2>   ; call  moveBird
   184                              <2> %endif
    70                              <1>   %include "renderImage.asm"
     1                              <2> %ifndef renderImage_asm
     2                              <2> %define renderImage_asm
     3                              <2> 
     4 0000113E 55                  <2> renderImage:                push bp
     5 0000113F 89E5                <2>                             mov bp, sp
     6 00001141 60                  <2>                             pushA
     7 00001142 1E                  <2>                             push DS
     8                              <2> 
     9 00001143 B43D                <2>                             mov ah, 0x3D                ; open file service of int 21h
    10 00001145 B000                <2>                             mov al, 0x00                ; read mode
    11 00001147 8B5608              <2>                             mov dx, [bp+8]              ; point dx to the file name
    12 0000114A CD21                <2>                             int 21h
    13                              <2> 
    14                              <2>                             ; carry flag indicates whether the file has been opened successfully or not
    15                              <2>                             ; if the file has been opened successfully then ax will contain the file handle
    16                              <2>                             ; otherwise, it will contain the error code
    17                              <2> 
    18 0000114C 721F                <2>                             jc file_error               ; if the file hasn't been opened successfully
    19                              <2> 
    20                              <2>                             
    21 0000114E 89C3                <2>                             mov bx, ax                  ; move file handle to bx
    22 00001150 8B4604              <2>                             mov ax, [bp+4]              ; vram segment = 0xA000
    23 00001153 8ED8                <2>                             mov DS, ax
    24 00001155 8B4E06              <2>                             mov cx, [bp+6]              ; byte count = 64000
    25 00001158 BA0000              <2>                             mov dx, 0
    26 0000115B B43F                <2>                             mov ah, 0x3F
    27 0000115D CD21                <2>                             int 21h
    28                              <2> 
    29 0000115F 720C                <2>                             jc file_error
    30                              <2> 
    31 00001161 B43E                <2>                             mov ah, 0x3E
    32 00001163 CD21                <2>                             int 21h
    33                              <2> 
    34 00001165 1F                  <2>                             pop DS
    35 00001166 61                  <2>                             popA
    36 00001167 89EC                <2>                             mov sp, bp
    37 00001169 5D                  <2>                             pop bp
    38 0000116A C20600              <2>                             ret 6
    39                              <2> 
    40 0000116D B44C                <2>         file_error:         mov ah, 0x4C
    41 0000116F B401                <2>                             mov ah, 1
    42 00001171 CD21                <2>                             int 21h
    43                              <2> 
    44                              <2> %endif
    71                              <1> 
    72 00001173 55                  <1> print_scr:		push bp
    73 00001174 89E5                <1> 				mov bp, sp
    74                              <1> 				
    75 00001176 60                  <1> 				pusha
    76 00001177 06                  <1> 				push es
    77 00001178 6A02                <1> 				push word 2
    78 0000117A E89EFD              <1> 				call set_palette1
    79 0000117D FF7630              <1> 				push word [bp+48]
    80 00001180 FF762E              <1> 				push word[bp+46]
    81 00001183 FF762C              <1> push word[bp+44]
    82 00001186 E8B5FF              <1> call renderImage
    83                              <1> 				; push word[bp+10]			; ax = 0x0000
    84                              <1> 				; push word[bp+34]			; cx = 320*190 = 64,000
    85                              <1> 				; push word[bp+6]				; es = 0xA000
    86                              <1> 				; push word[bp+4]				; di = 0x0000
    87                              <1> 				; call clrscr
    88                              <1> 
    89 00001189 FF7610              <1> 				push word[bp+16]			; attribute (color) = 0x02 (green)
    90 0000118C FF7608              <1> 				push word[bp+8]				; total bytes = 320*200 = 64,000
    91 0000118F FF760E              <1> 				push word[bp+14]			; row number = 194
    92 00001192 FF760C              <1> 				push word[bp+12]			; cx = width (columns) = 320
    93 00001195 FF7606              <1> 				push word[bp+6]				; es = 0xA000
    94 00001198 E884FE              <1> 				call grass
    95                              <1> 
    96 0000119B FF7628              <1> 				push word [bp+40]			; pillar count
    97 0000119E FF7624              <1> 				push word [bp+36]			; grass height
    98 000011A1 FF7616              <1> 				push word [bp+22]			; space between pillars
    99 000011A4 FF7626              <1> 				push word [bp+38]			; height = 200
   100 000011A7 FF761C              <1> 				push word [bp+28]			; rectangle height = 72
   101 000011AA FF761A              <1> 				push word [bp+26]			; rectangle width = 30
   102 000011AD FF7618              <1> 				push word [bp+24]			; attribute (color) = 0x04 (red)
   103 000011B0 FF760C              <1> 				push word [bp+12]			; width (columns) = 320
   104 000011B3 FF7614              <1> 				push word [bp+20]			; x = 0
   105 000011B6 FF7612              <1> 				push word [bp+18]			; rectangle_y = 260
   106 000011B9 FF7606              <1> 				push word [bp+6]			; es = 0xA000
   107 000011BC E8FAFD              <1> 				call printPillars
   108                              <1> 
   109 000011BF FF7620              <1> 				push word[bp+32]
   110 000011C2 FF761E              <1> 				push word[bp+30]
   111 000011C5 6A00                <1> 				push word 0x0000
   112 000011C7 E88CFE              <1> 				call printBirdy
   113                              <1> 
   114 000011CA 07                  <1> 				pop es
   115 000011CB 61                  <1> 				popa
   116 000011CC 89EC                <1> 				mov sp, bp
   117 000011CE 5D                  <1> 				pop bp
   118 000011CF C22800              <1> 				ret 40
   119                              <1> 
   120                              <1> %endif
   105                                                          %include "printAnimation.asm"
     1                              <1> ; %ifndef printAnimation_asm
     2                              <1> ; %define printAnimation_asm
     3                              <1> 
     4                              <1> ; %include "batt.asm"
     5                              <1> ; %include "clrscr.asm"
     6                              <1> ; %include "printPillars.asm"
     7                              <1> 
     8                              <1> ; %include "moveGrass.asm"
     9                              <1> ; %include "update_pillar_coordinates.asm"
    10                              <1> ; %include "moveBird.asm"
    11                              <1> 
    12                              <1> ; printAnimation:         push bp
    13                              <1> 				        ; mov bp, sp
    14                              <1> 
    15                              <1> 				        ; pusha
    16                              <1> 				        ; push es
    17                              <1> 
    18                              <1> 						; push word [bp+46]
    19                              <1> 						; push word [bp+28]
    20                              <1> 						; push word [bp+44]							; pillar starting position
    21                              <1> 						; push word [bp+42]							; pillar update speed
    22                              <1> 						; push word [bp+40]							; pillar count
    23                              <1> 						; push word [bp+18]							; y
    24                              <1>                         ; call update_pillar_coordinates
    25                              <1> 
    26                              <1> 						
    27                              <1> 						; push word [bp+50]
    28                              <1> 						; push word [bp+32]
    29                              <1>                         ; call moveBird
    30                              <1> 
    31                              <1> 				        ; push word[bp+10]			; ax = 0x0000
    32                              <1> 				        ; push word[bp+34]			; cx = 320*190 
    33                              <1> 				        ; push word[bp+6]				; es = 0xA000
    34                              <1> 				        ; push word[bp+4]				; di = 0x0000
    35                              <1> 				        ; call clrscr
    36                              <1> 
    37                              <1> 						; push word [bp+48]			; buffer offset
    38                              <1> 						; push word [bp+36]			; grass height
    39                              <1> 						; push word [bp+14]			; row number = 190
    40                              <1> 						; push word [bp+12]			; columns = 320
    41                              <1> 						; push word [bp+6]			; 0xA000
    42                              <1>                         ; call moveGrass
    43                              <1> 
    44                              <1> 				        ; push word [bp+36]			; grass height
    45                              <1> 				        ; push word [bp+22]			; space between pillars
    46                              <1> 				        ; push word [bp+38]			; height = 200
    47                              <1> 
    48                              <1> 				        ; push word [bp+28]			; rectangle height = 72
    49                              <1> 				        ; push word [bp+26]			; rectangle width = 30
    50                              <1> 				        ; push word [bp+24]			; attribute (color) = 0x04 (red)
    51                              <1> 				        ; push word [bp+12]			; width (columns) = 320
    52                              <1> 				        ; push word [bp+20]			; x = 0
    53                              <1> 				        ; push word [bp+18]			; y = 260
    54                              <1> 				        ; push word [bp+6]			; es = 0xA000
    55                              <1> 				        ; call printPillars
    56                              <1> 	; push word [bp+50]
    57                              <1> 				        ; push word[bp+32]
    58                              <1> 				        ; push word[bp+30]
    59                              <1> 				        ; push word 0x04
    60                              <1> 					
    61                              <1> 					
    62                              <1> 				        ; call printBirdy
    63                              <1> 
    64                              <1> 				      
    65                              <1> 
    66                              <1> 				        ; pop es
    67                              <1> 				        ; popa
    68                              <1> 						; mov sp, bp
    69                              <1> 				        ; pop bp
    70                              <1> 				        ; ret 48
    71                              <1>                                           
    72                              <1> 
    73                              <1> ; %endif
    74                              <1> %ifndef printAnimation_asm
    75                              <1> %define printAnimation_asm
    76                              <1> 
    77                              <1> ; ; ; screen has already been printed once in the main before the calling of this function
    78                              <1> ; ; ; prints background as it is
    79                              <1> ; ; ; updates birds coordinates and prints it
    80                              <1> ; ; ; updates pillar coordinates and prints it
    81                              <1> ; ; ; moves grass
    82                              <1> %include "palette.asm"
     1                              <2> %ifndef palette_asm
     2                              <2> %define palette_asm
     3                              <2> 
     4                              <2> ; start
     5                              <2> palette_data0: db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x00, 0x26, 0x00, 0x00, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x19, 0x0C, 0x00, 0x26, 0x0C, 0x00, 0x33, 0x0C, 0x00, 0x3F, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x0C, 0x19, 0x00, 0x19, 0x19, 0x00, 0x26, 0x19, 0x00, 0x33, 0x19, 0x00, 0x3F, 0x19, 0x00, 0x00, 0x26, 0x00, 0x0C, 0x26, 0x00, 0x19, 0x26, 0x00, 0x26, 0x26, 0x00, 0x33, 0x26, 0x00, 0x3F, 0x26, 0x00, 0x00, 0x33, 0x00, 0x0C, 0x33, 0x00, 0x19, 0x33, 0x00, 0x26, 0x33, 0x00, 0x33, 0x33, 0x00, 0x3F, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x0C, 0x3F, 0x00, 0x19, 0x3F, 0x00, 0x26, 0x3F, 0x00, 0x33, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x19, 0x00, 0x0C, 0x26, 0x00, 0x0C, 0x33, 0x00, 0x0C, 0x3F, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x19, 0x0C, 0x0C, 0x26, 0x0C, ...
     6                              <2> ; instructions
     7                              <2> palette_data1: db 0x01, 0x01, 0x02, 0x04, 0x04, 0x06, 0x05, 0x06, 0x09, 0x09, 0x09, 0x0C, 0x0B, 0x0D, 0x14, 0x09, 0x0A, 0x12, 0x0A, 0x0D, 0x19, 0x06, 0x08, 0x0D, 0x09, 0x02, 0x0D, 0x05, 0x02, 0x09, 0x0B, 0x11, 0x1B, 0x0D, 0x02, 0x13, 0x12, 0x11, 0x13, 0x0D, 0x05, 0x13, 0x0D, 0x0D, 0x0E, 0x13, 0x32, 0x3A, 0x13, 0x05, 0x1A, 0x13, 0x35, 0x3C, 0x06, 0x09, 0x11, 0x13, 0x09, 0x1C, 0x0C, 0x19, 0x23, 0x1A, 0x19, 0x1A, 0x12, 0x2D, 0x35, 0x08, 0x06, 0x0B, 0x2A, 0x29, 0x2A, 0x12, 0x2A, 0x33, 0x0B, 0x15, 0x1C, 0x31, 0x1E, 0x3C, 0x35, 0x25, 0x3D, 0x25, 0x25, 0x26, 0x15, 0x15, 0x16, 0x33, 0x22, 0x3C, 0x22, 0x21, 0x22, 0x0B, 0x16, 0x22, 0x2D, 0x2D, 0x2D, 0x06, 0x0D, 0x13, 0x0C, 0x11, 0x16, 0x32, 0x31, 0x32, 0x13, 0x15, 0x1C, 0x1D, 0x1D, 0x1E, 0x0C, 0x1D, 0x24, 0x0E, 0x21, 0x2B, 0x1B, 0x09, 0x24, 0x35, 0x35, 0x35, 0x1A, 0x0D, 0x24, 0x12, 0x02, 0x1A, 0x0D, 0x1E, 0x29, 0x3D, 0x3D, 0x3E, 0x11, 0x12, 0x1A, 0x3A, 0x3A, 0x3A, 0x10, 0x02, 0x16, 0x0E, 0x25, 0x2D, 0x2E, 0x19, 0x3A, 0x2A, 0x16, 0x35, 0x11, 0x25, 0x2D, 0x36, 0x29, ...
     8                              <2> 
     9                              <2> 
    10                              <2> ; background
    11                              <2> palette_data2: db 0x06, 0x04, 0x09, 0x09, 0x05, 0x0C, 0x05, 0x04, 0x06, 0x0D, 0x05, 0x12, 0x14, 0x09, 0x1B, 0x11, 0x06, 0x16, 0x04, 0x03, 0x05, 0x13, 0x07, 0x19, 0x0B, 0x09, 0x0C, 0x1B, 0x0A, 0x22, 0x0D, 0x09, 0x13, 0x1C, 0x0D, 0x23, 0x11, 0x09, 0x15, 0x19, 0x09, 0x1E, 0x24, 0x11, 0x2B, 0x05, 0x09, 0x0D, 0x11, 0x0D, 0x13, 0x23, 0x0E, 0x29, 0x05, 0x0D, 0x14, 0x15, 0x0D, 0x1C, 0x14, 0x11, 0x14, 0x24, 0x15, 0x2B, 0x1C, 0x11, 0x23, 0x21, 0x0D, 0x26, 0x05, 0x0A, 0x11, 0x0C, 0x0C, 0x12, 0x24, 0x19, 0x2B, 0x16, 0x0A, 0x21, 0x0E, 0x0C, 0x0E, 0x2C, 0x21, 0x33, 0x2D, 0x25, 0x33, 0x35, 0x31, 0x3B, 0x1D, 0x15, 0x24, 0x33, 0x2E, 0x39, 0x2B, 0x1D, 0x32, 0x29, 0x15, 0x2E, 0x28, 0x12, 0x2D, 0x19, 0x0D, 0x1E, 0x0A, 0x11, 0x1A, 0x22, 0x1E, 0x24, 0x1A, 0x15, 0x1B, 0x06, 0x11, 0x19, 0x2A, 0x19, 0x31, 0x1B, 0x19, 0x1D, 0x25, 0x1D, 0x2B, 0x21, 0x11, 0x26, 0x2A, 0x16, 0x30, 0x1A, 0x12, 0x1C, 0x36, 0x35, 0x3C, 0x2D, 0x29, 0x33, 0x0A, 0x15, 0x1D, 0x21, 0x0B, 0x25, 0x15, 0x11, 0x1A, 0x32, 0x2A, 0x39, 0x16, 0x0D, 0x21, 0x0C, 0x0D, ...
    12                              <2> 
    13                              <2> ; escape
    14                              <2> palette_data3: db  0x02, 0x02, 0x04, 0x04, 0x06, 0x0A, 0x03, 0x04, 0x06, 0x05, 0x08, 0x0E, 0x06, 0x0A, 0x11, 0x06, 0x0D, 0x14, 0x0A, 0x0A, 0x13, 0x12, 0x0C, 0x19, 0x09, 0x11, 0x1B, 0x09, 0x0D, 0x14, 0x0B, 0x19, 0x23, 0x0A, 0x15, 0x1D, 0x09, 0x0E, 0x19, 0x03, 0x03, 0x08, 0x0A, 0x16, 0x21, 0x3E, 0x3E, 0x3E, 0x0A, 0x0B, 0x19, 0x07, 0x11, 0x1A, 0x06, 0x07, 0x10, 0x0D, 0x21, 0x2C, 0x12, 0x29, 0x33, 0x0C, 0x1E, 0x29, 0x07, 0x0E, 0x18, 0x0C, 0x1D, 0x26, 0x09, 0x09, 0x0D, 0x12, 0x22, 0x2B, 0x39, 0x3A, 0x3A, 0x0B, 0x10, 0x16, 0x13, 0x15, 0x1A, 0x11, 0x26, 0x31, 0x12, 0x25, 0x2E, 0x13, 0x19, 0x23, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0E, 0x26, 0x31, 0x12, 0x12, 0x1C, 0x19, 0x1A, 0x1D, 0x24, 0x25, 0x26, 0x11, 0x12, 0x15, 0x29, 0x29, 0x2B, 0x13, 0x1D, 0x25, 0x13, 0x2C, 0x36, 0x12, 0x16, 0x22, 0x25, 0x26, 0x29, 0x14, 0x2E, 0x38, 0x2D, 0x2D, 0x2E, 0x0E, 0x24, 0x2E, 0x13, 0x1E, 0x29, 0x1C, 0x1E, 0x21, 0x2E, 0x2E, 0x30, 0x1A, 0x2A, 0x32, 0x07, 0x10, 0x17, 0x1C, 0x1D, 0x1E, 0x21, 0x22, 0x24, 0x11, 0x0C, 0x16, 0x14, 0x1A,...
    15                              <2> 
    16                              <2> ; end
    17                              <2> palette_data4: db 0x01, 0x01, 0x03, 0x05, 0x05, 0x0A, 0x0B, 0x0A, 0x12, 0x0D, 0x0D, 0x15, 0x04, 0x04, 0x07, 0x09, 0x08, 0x0D, 0x3F, 0x3F, 0x3F, 0x08, 0x07, 0x0D, 0x12, 0x12, 0x1A, 0x15, 0x15, 0x1D, 0x0A, 0x05, 0x05, 0x0E, 0x0D, 0x19, 0x18, 0x17, 0x1F, 0x10, 0x0E, 0x1A, 0x1B, 0x1D, 0x24, 0x24, 0x26, 0x2B, 0x12, 0x0A, 0x09, 0x15, 0x0D, 0x0B, 0x11, 0x11, 0x15, 0x2B, 0x2D, 0x32, 0x10, 0x0F, 0x16, 0x19, 0x19, 0x1C, 0x19, 0x19, 0x21, 0x08, 0x07, 0x10, 0x29, 0x2A, 0x2C, 0x04, 0x03, 0x08, 0x0E, 0x11, 0x19, 0x31, 0x32, 0x34, 0x39, 0x39, 0x39, 0x0E, 0x08, 0x07, 0x35, 0x35, 0x35, 0x21, 0x22, 0x24, 0x26, 0x28, 0x2E, 0x07, 0x08, 0x0C, 0x16, 0x19, 0x21, 0x1E, 0x21, 0x29, 0x0E, 0x10, 0x16, 0x2E, 0x31, 0x35, 0x34, 0x36, 0x39, 0x25, 0x25, 0x26, 0x19, 0x0E, 0x0B, 0x29, 0x2B, 0x30, 0x2D, 0x2D, 0x2E, 0x21, 0x23, 0x29, 0x1C, 0x11, 0x0E, 0x15, 0x15, 0x16, 0x1E, 0x20, 0x26, 0x0D, 0x0D, 0x0E, 0x1D, 0x1D, 0x1E, 0x16, 0x18, 0x1E, 0x10, 0x09, 0x07, 0x22, 0x15, 0x11, 0x26, 0x29, 0x30, 0x1A, 0x1F, 0x28, 0x08, 0x03, 0x02, 0x14, 0x17, ...
    18                              <2> 
    19                              <2> 
    20                              <2> set_palette1:                push bp
    21                              <2>                             mov bp, sp
    22                              <2> 
    23                              <2>                             mov dx, 0x3C8       ; DAC write index register
    24                              <2>                             xor al, al          ; Start with color index 0
    25                              <2>                             out dx, al
    26                              <2> 
    27                              <2>                             mov bx, [bp+4]
    28                              <2>                             cmp bx, 0
    29                              <2>                             jne is1
    30                              <2>                             mov si, palette_data0
    31                              <2>                             jmp write_to_port
    32                              <2> 
    33                              <2>      is1:                   cmp bx, 1
    34                              <2>                             jne is2
    35                              <2>                             mov si, palette_data1
    36                              <2>                             jmp write_to_port
    37                              <2> 
    38                              <2>      is2:                   cmp bx, 2
    39                              <2>                             jne is3
    40                              <2>                             mov si, palette_data2
    41                              <2>                             jmp write_to_port
    42                              <2> 
    43                              <2>      is3:                   cmp bx, 3
    44                              <2>                             jne is4
    45                              <2>                             mov si, palette_data3
    46                              <2>                             jmp write_to_port
    47                              <2> 
    48                              <2>      is4:                   cmp bx, 4
    49                              <2>                             jne write_to_port
    50                              <2>                             mov si, palette_data4
    51                              <2>                             jmp write_to_port                           
    52                              <2> 
    53                              <2>     write_to_port:          mov cx, 768         ; 256 colors * 3 components
    54                              <2>                             mov dx, 0x3C9       ; DAC data register
    55                              <2>                             
    56                              <2>                             rep outsb           ; Output 768 bytes from ds:si to port dx
    57                              <2> 
    58                              <2>                             mov sp, bp
    59                              <2>                             pop bp 
    60                              <2>                             ret 2
    61                              <2> 
    62                              <2> %endif
    83                              <1> %include "clrscr.asm"
     1                              <2> %ifndef clrscr_asm
     2                              <2> %define clrscr_asm
     3                              <2> 
     4                              <2> clrscr:         push bp
     5                              <2>                 mov bp, sp
     6                              <2>                 
     7                              <2>                 push ax
     8                              <2>                 push cx
     9                              <2> 
    10                              <2>                 push es
    11                              <2> 
    12                              <2>                 push di
    13                              <2> 
    14                              <2>                 les di, [bp+4]
    15                              <2> 
    16                              <2>                 mov ax, [bp+10]
    17                              <2>                 mov cx, [bp+8]
    18                              <2>                 shr cx, 1
    19                              <2> 
    20                              <2>                 cld
    21                              <2>                 rep stosw
    22                              <2> 
    23                              <2>                 pop di
    24                              <2> 
    25                              <2>                 pop es
    26                              <2> 
    27                              <2>                 pop cx
    28                              <2>                 pop ax
    29                              <2> 
    30                              <2>                 pop bp
    31                              <2> 
    32                              <2>                 ret 8
    33                              <2> 
    34                              <2> %endif
    84                              <1> %include "printPillars.asm"
     1                              <2> %ifndef printPillars_asm
     2                              <2> %define printPillars_asm
     3                              <2> 
     4                              <2> %include "printRect.asm"
     5                              <2> ;%include "rand.asm"
     6                              <2> 
     7                              <2> printPillars:               push bp
     8                              <2>                             mov bp, sp
     9                              <2> 
    10                              <2>                             pushA
    11                              <2>                             push ES
    12                              <2>                             
    13                              <2>                             mov bx, [bp+16]                 ; current pillar height
    14                              <2>                             xor di, di
    15                              <2>                            
    16                              <2>      loop_pillars:          
    17                              <2>                             push word [bx]                  ; rectangle height 
    18                              <2>                             
    19                              <2>                             push word [bp+14]               ; rectangle width = 20
    20                              <2>                             push word [bp+12]               ; attribute (color)
    21                              <2>                             push word [bp+10]               ; columns = 320
    22                              <2>                             push word [bp+8]                ; x = 0
    23                              <2>                             add di, [bp+6]
    24                              <2>                             mov ax, [di]  
    25                              <2>                             push ax                         ; rectangle_y
    26                              <2>                             push word [bp+4]                ; es = 0xA000
    27                              <2>                             call printRect  
    28                              <2> 
    29                              <2>                             mov ax, [bp+18]                 ; total height = 200
    30                              <2>                             mov dx, [bx]                    ; first pillar height 
    31                              <2>                             sub ax, dx                      ; total height - first pillar height
    32                              <2>                             mov dx, [bp+20]                 ; space between pillars = 70
    33                              <2>                             sub ax, dx  
    34                              <2>                             mov dx, [bp+22]                 ; grass height = 10
    35                              <2>                             sub ax, dx  
    36                              <2> 
    37                              <2>                             mov cx, [bx]                    ; first pillar height 
    38                              <2>                             add cx, [bp+20]                 ; space between pillars + first pillar height
    39                              <2> 
    40                              <2>                             push ax                         ; rectangle height
    41                              <2>                             push word [bp+14]               ; rectangle width
    42                              <2>                             push word [bp+12]               ; attribute (color)
    43                              <2>                             push word [bp+10]               ; columns = 320
    44                              <2>                             push cx
    45                              <2>                             push word [DS:di]               ; y
    46                              <2>                             push word [bp+4]                ; es = 0xA000
    47                              <2>                             call printRect
    48                              <2> 
    49                              <2>                             add bx, 2
    50                              <2>                             sub di, [bp+6]
    51                              <2>                             add di, 2
    52                              <2>                             mov si, [bp+24]
    53                              <2>                             shl si, 1
    54                              <2>                             cmp di, si
    55                              <2>                             jnz loop_pillars
    56                              <2> 
    57                              <2>                             pop ES
    58                              <2>                             popA
    59                              <2>                             pop bp
    60                              <2> 
    61                              <2>                             ret 22
    62                              <2> 
    63                              <2> %endif
    85                              <1>   %include "renderImage.asm"
     1                              <2> %ifndef renderImage_asm
     2                              <2> %define renderImage_asm
     3                              <2> 
     4                              <2> renderImage:                push bp
     5                              <2>                             mov bp, sp
     6                              <2>                             pushA
     7                              <2>                             push DS
     8                              <2> 
     9                              <2>                             mov ah, 0x3D                ; open file service of int 21h
    10                              <2>                             mov al, 0x00                ; read mode
    11                              <2>                             mov dx, [bp+8]              ; point dx to the file name
    12                              <2>                             int 21h
    13                              <2> 
    14                              <2>                             ; carry flag indicates whether the file has been opened successfully or not
    15                              <2>                             ; if the file has been opened successfully then ax will contain the file handle
    16                              <2>                             ; otherwise, it will contain the error code
    17                              <2> 
    18                              <2>                             jc file_error               ; if the file hasn't been opened successfully
    19                              <2> 
    20                              <2>                             
    21                              <2>                             mov bx, ax                  ; move file handle to bx
    22                              <2>                             mov ax, [bp+4]              ; vram segment = 0xA000
    23                              <2>                             mov DS, ax
    24                              <2>                             mov cx, [bp+6]              ; byte count = 64000
    25                              <2>                             mov dx, 0
    26                              <2>                             mov ah, 0x3F
    27                              <2>                             int 21h
    28                              <2> 
    29                              <2>                             jc file_error
    30                              <2> 
    31                              <2>                             mov ah, 0x3E
    32                              <2>                             int 21h
    33                              <2> 
    34                              <2>                             pop DS
    35                              <2>                             popA
    36                              <2>                             mov sp, bp
    37                              <2>                             pop bp
    38                              <2>                             ret 6
    39                              <2> 
    40                              <2>         file_error:         mov ah, 0x4C
    41                              <2>                             mov ah, 1
    42                              <2>                             int 21h
    43                              <2> 
    44                              <2> %endif
    86                              <1> %include "moveGrass.asm"
     1                              <2> %ifndef moveGrass_asm
     2                              <2> %define moveGrass_asm
     3                              <2> 
     4 000011D2 55                  <2> moveGrass:                  push bp
     5 000011D3 89E5                <2>                             mov bp, sp
     6 000011D5 60                  <2>                             pushA
     7 000011D6 06                  <2>                             push ES
     8 000011D7 1E                  <2>                             push DS
     9                              <2> 
    10 000011D8 8B4604              <2>                             mov ax, [bp+4]              ; 0x0A000
    11 000011DB 8EC0                <2>                             mov ES, ax
    12 000011DD 8ED8                <2>                             mov DS, ax
    13                              <2> 
    14 000011DF 8B4606              <2>                             mov ax, [bp+6]              ; columns = 320
    15 000011E2 8B5E08              <2>                             mov bx, [bp+8]              ; line number = 190
    16 000011E5 F7E3                <2>                             mul bx
    17 000011E7 89C7                <2>                             mov di, ax
    18 000011E9 8B560A              <2>                             mov dx, [bp+10]             ; height of grass = 10
    19                              <2> 
    20 000011EC 8B4E06              <2>         moveGrass_loop:             mov cx, [bp+6]              ; columns = 320
    21 000011EF 49                  <2>                                     dec cx
    22 000011F0 8B5E0C              <2>                                     mov bx, [bp+12]             ; buffer offset = 64000
    23                              <2> 
    24 000011F3 268A05              <2>                                     mov al, [ES:DI]
    25 000011F6 268807              <2>                                     mov [ES:bx], al
    26                              <2> 
    27 000011F9 89FE                <2> 									mov si, di
    28 000011FB 46                  <2> 									inc si
    29                              <2> 
    30 000011FC FC                  <2> 									cld
    31 000011FD F3A4                <2> 									rep movsb
    32                              <2> 
    33 000011FF 268A07              <2> 									mov al, [ES:BX]
    34 00001202 268805              <2> 									mov [ES:DI], al
    35                              <2>                                     
    36 00001205 47                  <2>                                     inc di
    37 00001206 4A                  <2>                                     dec dx
    38 00001207 75E3                <2>                                     jnz moveGrass_loop
    39                              <2> 
    40 00001209 1F                  <2>                             pop DS
    41 0000120A 07                  <2>                             pop ES
    42 0000120B 61                  <2>                             popA
    43 0000120C 5D                  <2>                             pop bp
    44                              <2> 
    45 0000120D C20A00              <2>                             ret 10
    46                              <2> 
    47                              <2> %endif
    87                              <1> %include "update_pillar_coordinates.asm"
     1                              <2> %ifndef update_pillar_coordinates_asm
     2                              <2> %define update_pillar_coordinates_asm
     3                              <2> 
     4                              <2> %include "pillar_height.asm"
     1                              <3> %ifndef pillar_height_asm
     2                              <3> %define pillar_height_asm
     3                              <3> 
     4                              <3> %include "rand.asm"
     1                              <4> %ifndef rand_asm
     2                              <4> %define rand_asm
     3                              <4> 
     4                              <4> %macro      rand 2
     5                              <4> 
     6                              <4>             sub     sp, 2   ; Temporary space for the return value
     7                              <4>             push    %2      ; Unsigned lower limit (inclusive)
     8                              <4>             push    %1      ; Unsigned upper limit (exclusive)
     9                              <4>             call    rand_int
    10                              <4> 
    11                              <4> %endmacro
    12                              <4> 
    13 00001210 0000                <4> seed:       dw 0
    14                              <4> ; rand()    :   Returns a random number between
    15                              <4> ;               [lower_limit, upper_limit).
    16                              <4> ;               Returns 1 if lower_limit == upper_limit
    17                              <4> rand_int:
    18 00001212 83EC02              <4>             sub     sp, 2                           ; Arbitary placeholder
    19 00001215 55                  <4>             push    bp
    20 00001216 89E5                <4>             mov     bp, sp
    21                              <4> 
    22                              <4>     %push       mycontext
    23                              <4>     %stacksize  small
    24                              <4>     %arg        unsigned_lower_limit:word,                 unsigned_upper_limit:word,                 result_space:word
    27                              <4> 
    28 00001218 50                  <4>             push    ax
    29 00001219 51                  <4>             push    cx
    30 0000121A 52                  <4>             push    dx
    31                              <4> 
    32 0000121B 8B4E08              <4>             mov     cx, [unsigned_upper_limit]
    33 0000121E 2B4E06              <4>             sub     cx, [unsigned_lower_limit]
    34 00001221 09C9                <4>             or      cx, cx                          ; Same as cmp cx, 0
    35 00001223 7501                <4>             jnz     .read_tsc
    36                              <4> 
    37 00001225 41                  <4>             inc     cx                              ; if (cx = 0) => cx = 1
    38                              <4> 
    39                              <4>     .read_tsc:
    40 00001226 0F31                <4>             rdtsc                                   ; Reads the value of TSC into
    41                              <4>                                                     ; EDX:EAX
    42 00001228 0306[1012]          <4>             add ax, [seed]                          ; Add our seed to the read value
    43 0000122C FF06[1012]          <4>             inc word[seed]
    44 00001230 31D2                <4>             xor     dx, dx                          ; We don't need the value from DX
    45 00001232 F7F1                <4>             div     cx                              ; DX = 0:AX % abs(upper_limit - lower_limit)
    46                              <4> 
    47 00001234 035606              <4>             add     dx, [unsigned_lower_limit]
    48 00001237 89560A              <4>             mov     [result_space], dx
    49                              <4> 
    50 0000123A 5A                  <4>             pop     dx
    51 0000123B 59                  <4>             pop     cx
    52 0000123C 58                  <4>             pop     ax
    53                              <4> 
    54 0000123D 5D                  <4>             pop     bp
    55 0000123E 83C402              <4>             add     sp, 2                           ; Free the space taken by the arbitrary placeholder
    56                              <4> 
    57                              <4>     %pop    mycontext
    58                              <4> 
    59                              <4>     .ret:
    60 00001241 C20400              <4>             ret     4
    61                              <4> 
    62                              <4> %endif
     5                              <3> 
     6 00001244 55                  <3> set_pillar_height:                      push bp
     7 00001245 89E5                <3>                                         mov bp, sp
     8 00001247 60                  <3>                                         pushA
     9                              <3> 
    10 00001248 8B7E04              <3>                                         mov di, [bp+4]                              ; current pillar height address
    11 0000124B 8B5E06              <3>                                         mov bx, [bp+6]                              ; pillar y coordinates
    12 0000124E 8B4E08              <3>                                         mov cx, [bp+8]                              ; total pillars 
    13                              <3> 
    14                              <3>         set_pillar_height_loop:                 rand 0, 5
    14                              <4>  set_pillar_height_loop: 
     5                              <4> 
     6 00001251 83EC02              <4>  sub sp, 2
     7 00001254 6A05                <4>  push %2
     8 00001256 6A00                <4>  push %1
     9 00001258 E8B7FF              <4>  call rand_int
    10                              <4> 
    15 0000125B 5E                  <3>                                                 pop si
    16 0000125C D1E6                <3>                                                 shl si, 1
    17 0000125E 01DE                <3>                                                 add si, bx
    18 00001260 8B04                <3>                                                 mov ax, [si]
    19 00001262 8905                <3>                                                 mov [di], ax
    20 00001264 83C702              <3>                                                 add di, 2
    21 00001267 51                  <3>                                                 push cx
    22 00001268 B9FFFF              <3>                                                 mov cx, 0xffff
    23 0000126B E2FE                <3>                                                 waste_time:     loop waste_time
    24 0000126D 59                  <3>                                                 pop cx
    25 0000126E E2E1                <3>                                                 loop set_pillar_height_loop
    26                              <3> 
    27 00001270 61                  <3>                                         popA
    28 00001271 89EC                <3>                                         mov sp, bp
    29 00001273 5D                  <3>                                         pop bp
    30 00001274 C20600              <3>                                         ret 6
    31                              <3> 
    32 00001277 55                  <3> update_pillar_height:                   push bp
    33 00001278 89E5                <3>                                         mov bp, sp
    34 0000127A 60                  <3>                                         pushA
    35                              <3> 
    36 0000127B 8B7E04              <3>                                         mov di, [bp+4]                              ; current pillar height address
    37 0000127E 8B5E06              <3>                                         mov bx, [bp+6]                              ; pillar y coordinates
    38 00001281 8B5608              <3>                                         mov dx, [bp+8]                              ; current index of current pillar height
    39                              <3> 
    40                              <3>                                         rand 0, 5
     5                              <4> 
     6 00001284 83EC02              <4>  sub sp, 2
     7 00001287 6A05                <4>  push %2
     8 00001289 6A00                <4>  push %1
     9 0000128B E884FF              <4>  call rand_int
    10                              <4> 
    41 0000128E 5E                  <3>                                         pop si
    42 0000128F D1E6                <3>                                         shl si, 1
    43 00001291 01DE                <3>                                         add si, bx
    44 00001293 8B04                <3>                                         mov ax, [si]
    45 00001295 01D7                <3>                                         add di, dx
    46 00001297 8905                <3>                                         mov [di], ax
    47                              <3> 
    48 00001299 61                  <3>                                         popA
    49 0000129A 89EC                <3>                                         mov sp, bp
    50 0000129C 5D                  <3>                                         pop bp
    51 0000129D C20600              <3>                                         ret 6
    52                              <3> 
    53                              <3> %endif
     5                              <2> 
     6 000012A0 55                  <2> update_pillar_coordinates:              push bp
     7 000012A1 89E5                <2>                                         mov bp, sp
     8 000012A3 60                  <2>                                         pushA
     9                              <2> 
    10 000012A4 8B4E06              <2>                                         mov cx, [bp+6]                  ; number of pillars
    11 000012A7 8B5E04              <2>                                         mov bx, [bp+4]                  ; address of pillar coordinates
    12 000012AA 8B5608              <2>                                         mov dx, [bp+8]                  ; rotation speed
    13 000012AD 8B760A              <2>                                         mov si, [bp+10]                 ; pillar starting position = 290
    14                              <2>                                         
    15 000012B0 31FF                <2>                                         xor di, di
    16                              <2> 
    17 000012B2 8B07                <2>         update_pillar_loop:                     mov ax, [bx]
    18 000012B4 83F800              <2>                                                 cmp ax, 0
    19 000012B7 7712                <2>                                                 ja skip_update_height
    20 000012B9 8B760A              <2>                                                 mov si, [bp+10]
    21 000012BC 8937                <2>                                                 mov [bx], si
    22 000012BE 57                  <2>                                                 push di
    23 000012BF 8B460E              <2>                                                 mov ax, [bp+14]
    24 000012C2 50                  <2>                                                 push ax
    25 000012C3 FF760C              <2>                                                 push word [bp+12]
    26 000012C6 E8AEFF              <2>                                                 call update_pillar_height
    27 000012C9 0117                <2>                                                 add word [bx], dx
    28                              <2> 
    29 000012CB 2917                <2>         skip_update_height:                     sub word [bx], dx
    30 000012CD 8B07                <2>                                                 mov ax, [bx]
    31 000012CF 83F83B              <2>                                                 cmp ax, 59
    32 000012D2 7505                <2>                                                 jne chalo
    33 000012D4 8B7610              <2>                                                 mov si, [bp+16]
    34 000012D7 FF04                <2>                                                 inc word [si]
    35                              <2>                                                 
    36 000012D9 83C302              <2>                 chalo:                          add bx, 2
    37 000012DC 83C702              <2>                                                 add di, 2
    38 000012DF E2D1                <2>                                                 loop update_pillar_loop
    39                              <2> 
    40 000012E1 61                  <2>                                         popA 
    41 000012E2 5D                  <2>                                         pop bp
    42 000012E3 C20E00              <2>                                         ret 14                                                      
    43                              <2> 
    44                              <2> %endif
    88                              <1> %include "moveBird.asm"
     1                              <2> ; %ifndef moveBird_asm
     2                              <2> ; %define moveBird_asm
     3                              <2> 
     4                              <2> 
     5                              <2> 
     6                              <2> ; moveBird:                   push bp
     7                              <2>                             ; mov bp, sp
     8                              <2> 
     9                              <2>                             ; pushA
    10                              <2>                             ; mov bx, [bp+4]          ; bird y
    11                              <2>                             ; mov si, [bp+6]          ; bird flag address
    12                              <2> 
    13                              <2>                             ; cmp byte [si], 'U'
    14                              <2>                             ; je moveUp
    15                              <2>                             ; cmp word [bx], 180
    16                              <2>                             ; ja exit 
    17                              <2>                             ; inc word [bx]
    18                              <2>                             ; jmp exit
    19                              <2> 
    20                              <2>         ; moveUp:             cmp word [bx], 3
    21                              <2>                             ; jbe exit
    22                              <2>                             ; sub word [bx], 3
    23                              <2>                             
    24                              <2>         ; exit:               popA
    25                              <2>                             ; mov sp, bp
    26                              <2>                             ; pop bp
    27                              <2>                             ; ret 4
    28                              <2> 
    29                              <2> 							
    30                              <2> 							
    31                              <2> ; moveBirddown:
    32                              <2>     ; push bp
    33                              <2>     ; mov bp, sp
    34                              <2>     ; pusha
    35                              <2>     ; mov bx, [bp+4]          ; bird y position
    36                              <2> 
    37                              <2> ; check_ground:
    38                              <2>     ; cmp word [bx], 180      ; Check if bird is already at the ground
    39                              <2>     ; ja exittt               ; If yes, exit
    40                              <2> 
    41                              <2>     ; add word [bx], 1        ; Move the bird down by 1
    42                              <2>     ; cmp word [bx], 180      ; Check again if the bird has reached the ground
    43                              <2>     ; jne check_ground        ; If not, continue moving down
    44                              <2> 
    45                              <2> 
    46                              <2> ; exittt:
    47                              <2>     ; popa
    48                              <2>     ; mov sp, bp
    49                              <2>     ; pop bp
    50                              <2>     ; ret 2
    51                              <2> 
    52                              <2> ; collisioncheck:
    53                              <2>     ; push bp
    54                              <2>     ; mov bp, sp
    55                              <2>     ; pusha
    56                              <2>     ; mov di, [bp+4]
    57                              <2>     ; mov si, [bp+6]
    58                              <2>     ; mov bx, [bp+8]
    59                              <2> 
    60                              <2>     ; cmp byte [es:di], 0x07  ; Check if the pixel is background (0x07)
    61                              <2>     ; je collision            ; If yes, handle collision
    62                              <2> 
    63                              <2>         
    64                              <2>    ; jmp exitt
    65                              <2> 
    66                              <2> ; collision:
    67                              <2>     ; mov byte [si], 'D'      ; Set flag to 'D' (for moving down)
    68                              <2>     ; push bx                 ; Push bird's position
    69                              <2>     ; call moveBirddown 
    70                              <2>     
    71                              <2> ; jmp exitt
    72                              <2>              
    73                              <2> 
    74                              <2> ; exitt:
    75                              <2>     ; popa
    76                              <2>     ; mov sp, bp
    77                              <2>     ; pop bp
    78                              <2>     ; ret 6
    79                              <2> 	
    80                              <2> 	
    81                              <2> ; %endif
    82                              <2> %ifndef moveBird_asm
    83                              <2> %define moveBird_asm
    84                              <2> 
    85                              <2> moveBird:                   push bp
    86                              <2>                             mov bp, sp
    87                              <2> 
    88                              <2>                             pushA
    89                              <2>                             mov bx, [bp+4]          ; bird y
    90                              <2>                             mov si, [bp+6]          ; bird flag address
    91                              <2> 
    92                              <2>                             cmp byte [si], 'U'
    93                              <2>                             je moveUp
    94                              <2>                             cmp byte [si], 'W'
    95                              <2>                             je exit
    96                              <2>                             cmp word [bx], 180  ;terminationnnnnnnnnnnnnnn
    97                              <2>                             ja exit 
    98                              <2>                             inc word [bx]
    99                              <2>                             jmp exit
   100                              <2> 
   101                              <2>         moveUp:             cmp word [bx], 3
   102                              <2>                             jbe exit
   103                              <2>                             sub word [bx], 3
   104                              <2>                             mov byte [si], 'W'
   105                              <2>                             
   106                              <2>         exit:               popA
   107                              <2>                             mov sp, bp
   108                              <2>                             pop bp
   109                              <2>                             ret 4
   110                              <2> 							moveBirddown:
   111                              <2>     push bp
   112                              <2>     mov bp, sp
   113                              <2>     pusha
   114                              <2>     mov bx, [bp+4]          ; bird y position
   115                              <2> 
   116                              <2> check_ground:
   117                              <2>     cmp word [bx], 180      ; Check if bird is already at the ground
   118                              <2>     ja exittt               ; If yes, exit
   119                              <2> 
   120                              <2>     add word [bx], 1        ; Move the bird down by 1
   121                              <2>     cmp word [bx], 180      ; Check again if the bird has reached the ground
   122                              <2>     jne check_ground        ; If not, continue moving down
   123                              <2> 
   124                              <2> 
   125                              <2> exittt:
   126                              <2>     popa
   127                              <2>     mov sp, bp
   128                              <2>     pop bp
   129                              <2>     ret 2
   130                              <2> 
   131                              <2> collisioncheck:
   132                              <2>     push bp
   133                              <2>     mov bp, sp
   134                              <2>     pusha
   135                              <2>     mov di, [bp+4]
   136                              <2>    ; mov si, [bp+6]
   137                              <2>     mov bx, [bp+6]
   138                              <2> 
   139                              <2>     cmp byte [es:di], 0x00 ; Check if the pixel is background (0x07)
   140                              <2>     je collision            ; If yes, handle collision
   141                              <2> 
   142                              <2>         
   143                              <2>    jmp exitt
   144                              <2> 
   145                              <2> collision:
   146                              <2> ;      ; Set flag to 'D' (for moving down)
   147                              <2>     push bx                 ; Push bird's position
   148                              <2>     call moveBirddown 
   149                              <2>     
   150                              <2> jmp exitt
   151                              <2>              
   152                              <2> 
   153                              <2> exitt:
   154                              <2>     popa
   155                              <2>     mov sp, bp
   156                              <2>     pop bp
   157                              <2>     ret 4
   158                              <2> %endif
    89                              <1> %include "batt.asm"
     1                              <2> 
     2                              <2> %ifndef batt_asm
     3                              <2> %define batt_asm
     4                              <2> %include "moveBird.asm"
     5                              <2> printBirdy: 
     6                              <2>     push bp
     7                              <2>     mov bp, sp
     8                              <2>     pusha
     9                              <2> 
    10                              <2>     mov ax, 0xA000       ; Set VGA segment
    11                              <2>     mov es, ax
    12                              <2> 
    13                              <2>     mov bx, [bp+8]          ; row number (address)
    14                              <2>     mov ax, [bx]    
    15                              <2>     mov si, 320	
    16                              <2>     mul si      
    17                              <2>     mov bx, [bp+6]          ; column number (value)
    18                              <2>     add ax, bx        
    19                              <2>     mov dx, ax     
    20                              <2> mov di,dx
    21                              <2> add di,9
    22                              <2> sub di,640
    23                              <2> mov byte [es:di],0x00	
    24                              <2>     mov ax, [bp+4]         ; attribute = 0x00
    25                              <2>     mov bx, 9         ; Start with the widest width at the top
    26                              <2>     ; add dx, 350
    27                              <2>     add dx, 30
    28                              <2> 	
    29                              <2> 	
    30                              <2> triangle_top:
    31                              <2> 
    32                              <2>     mov di, dx
    33                              <2> 	
    34                              <2> 	push word[bp+8]
    35                              <2> 
    36                              <2> 	push di
    37                              <2> 	call collisioncheck
    38                              <2> 
    39                              <2>     mov cx, bx
    40                              <2>     sub di, cx
    41                              <2> 	
    42                              <2> mov byte [es:di],0x02
    43                              <2> push word [bp+8]
    44                              <2> 
    45                              <2> push di
    46                              <2> 
    47                              <2> call collisioncheck
    48                              <2>     rep stosb            ; Draw left side of the row
    49                              <2> 
    50                              <2>     ;mov cx, bx
    51                              <2>     add di, cx
    52                              <2> 	
    53                              <2>     mov cx, bx
    54                              <2> 	push word[bp+8]
    55                              <2> 	
    56                              <2> 	push di
    57                              <2> 	call collisioncheck
    58                              <2>     rep stosb            ; Draw right side of the row
    59                              <2> 
    60                              <2>     add dx, 320          
    61                              <2>     sub bx, 1  
    62                              <2> 
    63                              <2> ; mov ax,di
    64                              <2> ; push ax
    65                              <2> ; call collisioncheck
    66                              <2>     jg triangle_top
    67                              <2> ;rectangles are called from here on
    68                              <2>     mov bx, [bp+8]
    69                              <2>     mov ax, [bx]    
    70                              <2>     mov si,320 
    71                              <2>     mul si     
    72                              <2>          
    73                              <2>     sub ax, 1200
    74                              <2> 
    75                              <2>     push ax              
    76                              <2> 
    77                              <2>     mov bx, 10       ;len
    78                              <2> 	
    79                              <2>     mov cx, 8   ;width
    80                              <2> 	;rectangles are called (hard coded hein accordingly mujhay khud bhool gaya he mein ne 2 sal pehlay idhr kya kiya tha)
    81                              <2>     sub ax,1920
    82                              <2>     sub ax,1
    83                              <2> 
    84                              <2>     call drawRectangle   ; Draw the left rectangle
    85                              <2> 
    86                              <2>     pop ax               
    87                              <2>     add ax, 8        
    88                              <2>     push ax              
    89                              <2>     sub ax,642
    90                              <2> 
    91                              <2>     mov bx, 8            
    92                              <2>     mov cx, 7  
    93                              <2> 
    94                              <2>     call drawRectangle  ;bottom left
    95                              <2> 
    96                              <2>     ; 
    97                              <2>     pop ax              
    98                              <2>     sub ax, 320        
    99                              <2>     add ax, 18          
   100                              <2>     push ax              
   101                              <2> 
   102                              <2>     mov bx, 8          
   103                              <2>     mov cx, 7    
   104                              <2> 
   105                              <2>     call drawRectangle   ;bottom right
   106                              <2> 
   107                              <2>     ;
   108                              <2>     pop ax               
   109                              <2>     sub ax, 1600       
   110                              <2>     add ax, 5            
   111                              <2>     push ax              
   112                              <2> 
   113                              <2>     mov bx, 10          
   114                              <2>     mov cx, 8   
   115                              <2> 	
   116                              <2>     call drawRectangle 
   117                              <2> mov ax,0x0A00
   118                              <2> mov es,ax	
   119                              <2> ;mov byte [es:27275],0x00
   120                              <2> ;mov byte[es:2],0x00	;  top-right rectangle
   121                              <2>     pop ax
   122                              <2>     popa
   123                              <2>     mov sp, bp
   124                              <2>     pop bp
   125                              <2>     ret 6
   126                              <2> 
   127                              <2> drawRectangle:
   128                              <2>     ; Parameters: ax = starting address, bx = width, cx = height
   129                              <2>     push dx
   130                              <2>     push di
   131                              <2> 	mov si,[bp+4]
   132                              <2>     mov dx, cx            ; Save height in dx, so cx isnâ€™t restored each row
   133                              <2> drawRectangleLoopY:
   134                              <2>     mov di, ax            ; Set DI to starting address of the current row
   135                              <2> 
   136                              <2>     ; Place a white pixel (0x0F) at the starting position
   137                              <2>     mov byte [es:di], 0x0e
   138                              <2>     inc di  
   139                              <2> 	push ax
   140                              <2> 
   141                              <2> push di	; Move to the next pixel
   142                              <2> call collisioncheck
   143                              <2>     ; Now draw the rest of the row
   144                              <2>     mov cx, bx            ; Rectangle width
   145                              <2>     dec cx                ; Decrement width by 1 to account for the already placed white pixel
   146                              <2> drawRectangleLoopX:
   147                              <2>     mov byte [es:di], 0x00 ; Draw rectangle body in light color (0x04)
   148                              <2>     inc di
   149                              <2>     loop drawRectangleLoopX
   150                              <2> 	  ;mov byte [es:di], 0x0e
   151                              <2> 	 
   152                              <2> 	 push ax
   153                              <2> 
   154                              <2> push di
   155                              <2> call collisioncheck
   156                              <2>     add ax, 320           ; Move to the next row
   157                              <2>     dec dx                ; Decrement height counter
   158                              <2>     jnz drawRectangleLoopY ; Repeat for all rows
   159                              <2>     pop di
   160                              <2>     pop dx
   161                              <2>     ret 
   162                              <2> 
   163                              <2> ; collisioncheck:
   164                              <2>     ; push bp
   165                              <2>     ; mov bp, sp
   166                              <2>     ; pusha
   167                              <2>  ; mov di,[bp+4]
   168                              <2>  ; mov si,[bp+6]
   169                              <2>  ; mov bx,[bp+8]
   170                              <2>  ; cmp byte [es:di],0x07
   171                              <2>    
   172                              <2>     ; je collision 
   173                              <2> 
   174                              <2> ; exitt:
   175                              <2>     ; popa
   176                              <2>     ; pop bp
   177                              <2>     ; ret 6               ; Return, clean stack
   178                              <2> 
   179                              <2> ; collision:
   180                              <2>   
   181                              <2>    ; push si
   182                              <2>    ; push bx
   183                              <2>   ; call  moveBird
   184                              <2> %endif
    90                              <1> 
    91 000012E6 55                  <1> printAnimation:         push bp
    92 000012E7 89E5                <1> 				        mov bp, sp
    93                              <1> 
    94 000012E9 60                  <1> 				        pusha
    95 000012EA 06                  <1> 				        push es
    96                              <1> 
    97 000012EB FF7634              <1> 						push word [bp+52]							; score (address)
    98 000012EE FF762E              <1> 						push word [bp+46]							; rectangle height address
    99 000012F1 FF761C              <1> 						push word [bp+28]							; current pillar height
   100 000012F4 FF762C              <1> 						push word [bp+44]							; pillar starting position
   101 000012F7 FF762A              <1> 						push word [bp+42]							; pillar update speed
   102 000012FA FF7628              <1> 						push word [bp+40]							; pillar count
   103 000012FD FF7612              <1> 						push word [bp+18]							; y
   104 00001300 E89DFF              <1>                         call update_pillar_coordinates
   105                              <1> 
   106                              <1> 						
   107 00001303 FF7632              <1> 						push word [bp+50]
   108 00001306 FF7620              <1> 						push word [bp+32]
   109 00001309 E8F7EC              <1>                         call moveBird
   110 0000130C 6A02                <1> 						push word 2
   111 0000130E E80AFC              <1> 						call set_palette1
   112 00001311 FF763A              <1> 						push word [bp+58]
   113 00001314 FF7638              <1> 						push word[bp+56]
   114 00001317 FF7636              <1> 						push word[bp+54]
   115 0000131A E821FE              <1> 						call renderImage
   116                              <1> 
   117                              <1> 				        ; push word[bp+10]							; ax = 0x0000
   118                              <1> 				        ; push word[bp+34]							; cx = 320*190 
   119                              <1> 				        ; push word[bp+6]								; es = 0xA000
   120                              <1> 				        ; push word[bp+4]								; di = 0x0000
   121                              <1> 				        ; call clrscr				
   122                              <1> 				
   123 0000131D FF7630              <1> 						push word [bp+48]							; buffer offset
   124 00001320 FF7624              <1> 						push word [bp+36]							; grass height
   125 00001323 FF760E              <1> 						push word [bp+14]							; row number = 190
   126 00001326 FF760C              <1> 						push word [bp+12]							; columns = 320
   127 00001329 FF7606              <1> 						push word [bp+6]							; 0xA000
   128 0000132C E8A3FE              <1>                         call moveGrass				
   129                              <1> 				
   130 0000132F FF7628              <1> 						push word [bp+40]							; pillar count
   131 00001332 FF7624              <1> 				        push word [bp+36]							; grass height
   132 00001335 FF7616              <1> 				        push word [bp+22]							; space between pillars
   133 00001338 FF7626              <1> 				        push word [bp+38]							; height = 200
   134 0000133B FF761C              <1> 				        push word [bp+28]							; rectangle height = 72
   135 0000133E FF761A              <1> 				        push word [bp+26]							; rectangle width = 30
   136 00001341 FF7618              <1> 				        push word [bp+24]							; attribute (color) = 0x04 (red)
   137 00001344 FF760C              <1> 				        push word [bp+12]							; width (columns) = 320
   138 00001347 FF7614              <1> 				        push word [bp+20]							; x = 0
   139 0000134A FF7612              <1> 				        push word [bp+18]							; y = 260
   140 0000134D FF7606              <1> 				        push word [bp+6]							; es = 0xA000
   141 00001350 E866FC              <1> 				        call printPillars
   142                              <1> 
   143 00001353 FF7620              <1> 						push word [bp+32]
   144 00001356 FF761E              <1> 				        push word [bp+30]
   145 00001359 6A00                <1> 						push word 0x0000
   146 0000135B E8F8FC              <1> 						call printBirdy
   147                              <1> 						
   148                              <1> 
   149 0000135E 07                  <1> 				        pop es
   150 0000135F 61                  <1> 				        popa
   151 00001360 89EC                <1> 						mov sp, bp
   152 00001362 5D                  <1> 				        pop bp
   153 00001363 C23200              <1> 				        ret 50
   154                              <1>                                           
   155                              <1> 
   156                              <1> %endif
   106                                                          %include "pillar_height.asm"
     1                              <1> %ifndef pillar_height_asm
     2                              <1> %define pillar_height_asm
     3                              <1> 
     4                              <1> %include "rand.asm"
     5                              <1> 
     6                              <1> set_pillar_height:                      push bp
     7                              <1>                                         mov bp, sp
     8                              <1>                                         pushA
     9                              <1> 
    10                              <1>                                         mov di, [bp+4]                              ; current pillar height address
    11                              <1>                                         mov bx, [bp+6]                              ; pillar y coordinates
    12                              <1>                                         mov cx, [bp+8]                              ; total pillars 
    13                              <1> 
    14                              <1>         set_pillar_height_loop:                 rand 0, 5
    15                              <1>                                                 pop si
    16                              <1>                                                 shl si, 1
    17                              <1>                                                 add si, bx
    18                              <1>                                                 mov ax, [si]
    19                              <1>                                                 mov [di], ax
    20                              <1>                                                 add di, 2
    21                              <1>                                                 push cx
    22                              <1>                                                 mov cx, 0xffff
    23                              <1>                                                 waste_time:     loop waste_time
    24                              <1>                                                 pop cx
    25                              <1>                                                 loop set_pillar_height_loop
    26                              <1> 
    27                              <1>                                         popA
    28                              <1>                                         mov sp, bp
    29                              <1>                                         pop bp
    30                              <1>                                         ret 6
    31                              <1> 
    32                              <1> update_pillar_height:                   push bp
    33                              <1>                                         mov bp, sp
    34                              <1>                                         pushA
    35                              <1> 
    36                              <1>                                         mov di, [bp+4]                              ; current pillar height address
    37                              <1>                                         mov bx, [bp+6]                              ; pillar y coordinates
    38                              <1>                                         mov dx, [bp+8]                              ; current index of current pillar height
    39                              <1> 
    40                              <1>                                         rand 0, 5
    41                              <1>                                         pop si
    42                              <1>                                         shl si, 1
    43                              <1>                                         add si, bx
    44                              <1>                                         mov ax, [si]
    45                              <1>                                         add di, dx
    46                              <1>                                         mov [di], ax
    47                              <1> 
    48                              <1>                                         popA
    49                              <1>                                         mov sp, bp
    50                              <1>                                         pop bp
    51                              <1>                                         ret 6
    52                              <1> 
    53                              <1> %endif
   107                                                          %include "moveBird.asm"
     1                              <1> ; %ifndef moveBird_asm
     2                              <1> ; %define moveBird_asm
     3                              <1> 
     4                              <1> 
     5                              <1> 
     6                              <1> ; moveBird:                   push bp
     7                              <1>                             ; mov bp, sp
     8                              <1> 
     9                              <1>                             ; pushA
    10                              <1>                             ; mov bx, [bp+4]          ; bird y
    11                              <1>                             ; mov si, [bp+6]          ; bird flag address
    12                              <1> 
    13                              <1>                             ; cmp byte [si], 'U'
    14                              <1>                             ; je moveUp
    15                              <1>                             ; cmp word [bx], 180
    16                              <1>                             ; ja exit 
    17                              <1>                             ; inc word [bx]
    18                              <1>                             ; jmp exit
    19                              <1> 
    20                              <1>         ; moveUp:             cmp word [bx], 3
    21                              <1>                             ; jbe exit
    22                              <1>                             ; sub word [bx], 3
    23                              <1>                             
    24                              <1>         ; exit:               popA
    25                              <1>                             ; mov sp, bp
    26                              <1>                             ; pop bp
    27                              <1>                             ; ret 4
    28                              <1> 
    29                              <1> 							
    30                              <1> 							
    31                              <1> ; moveBirddown:
    32                              <1>     ; push bp
    33                              <1>     ; mov bp, sp
    34                              <1>     ; pusha
    35                              <1>     ; mov bx, [bp+4]          ; bird y position
    36                              <1> 
    37                              <1> ; check_ground:
    38                              <1>     ; cmp word [bx], 180      ; Check if bird is already at the ground
    39                              <1>     ; ja exittt               ; If yes, exit
    40                              <1> 
    41                              <1>     ; add word [bx], 1        ; Move the bird down by 1
    42                              <1>     ; cmp word [bx], 180      ; Check again if the bird has reached the ground
    43                              <1>     ; jne check_ground        ; If not, continue moving down
    44                              <1> 
    45                              <1> 
    46                              <1> ; exittt:
    47                              <1>     ; popa
    48                              <1>     ; mov sp, bp
    49                              <1>     ; pop bp
    50                              <1>     ; ret 2
    51                              <1> 
    52                              <1> ; collisioncheck:
    53                              <1>     ; push bp
    54                              <1>     ; mov bp, sp
    55                              <1>     ; pusha
    56                              <1>     ; mov di, [bp+4]
    57                              <1>     ; mov si, [bp+6]
    58                              <1>     ; mov bx, [bp+8]
    59                              <1> 
    60                              <1>     ; cmp byte [es:di], 0x07  ; Check if the pixel is background (0x07)
    61                              <1>     ; je collision            ; If yes, handle collision
    62                              <1> 
    63                              <1>         
    64                              <1>    ; jmp exitt
    65                              <1> 
    66                              <1> ; collision:
    67                              <1>     ; mov byte [si], 'D'      ; Set flag to 'D' (for moving down)
    68                              <1>     ; push bx                 ; Push bird's position
    69                              <1>     ; call moveBirddown 
    70                              <1>     
    71                              <1> ; jmp exitt
    72                              <1>              
    73                              <1> 
    74                              <1> ; exitt:
    75                              <1>     ; popa
    76                              <1>     ; mov sp, bp
    77                              <1>     ; pop bp
    78                              <1>     ; ret 6
    79                              <1> 	
    80                              <1> 	
    81                              <1> ; %endif
    82                              <1> %ifndef moveBird_asm
    83                              <1> %define moveBird_asm
    84                              <1> 
    85                              <1> moveBird:                   push bp
    86                              <1>                             mov bp, sp
    87                              <1> 
    88                              <1>                             pushA
    89                              <1>                             mov bx, [bp+4]          ; bird y
    90                              <1>                             mov si, [bp+6]          ; bird flag address
    91                              <1> 
    92                              <1>                             cmp byte [si], 'U'
    93                              <1>                             je moveUp
    94                              <1>                             cmp byte [si], 'W'
    95                              <1>                             je exit
    96                              <1>                             cmp word [bx], 180  ;terminationnnnnnnnnnnnnnn
    97                              <1>                             ja exit 
    98                              <1>                             inc word [bx]
    99                              <1>                             jmp exit
   100                              <1> 
   101                              <1>         moveUp:             cmp word [bx], 3
   102                              <1>                             jbe exit
   103                              <1>                             sub word [bx], 3
   104                              <1>                             mov byte [si], 'W'
   105                              <1>                             
   106                              <1>         exit:               popA
   107                              <1>                             mov sp, bp
   108                              <1>                             pop bp
   109                              <1>                             ret 4
   110                              <1> 							moveBirddown:
   111                              <1>     push bp
   112                              <1>     mov bp, sp
   113                              <1>     pusha
   114                              <1>     mov bx, [bp+4]          ; bird y position
   115                              <1> 
   116                              <1> check_ground:
   117                              <1>     cmp word [bx], 180      ; Check if bird is already at the ground
   118                              <1>     ja exittt               ; If yes, exit
   119                              <1> 
   120                              <1>     add word [bx], 1        ; Move the bird down by 1
   121                              <1>     cmp word [bx], 180      ; Check again if the bird has reached the ground
   122                              <1>     jne check_ground        ; If not, continue moving down
   123                              <1> 
   124                              <1> 
   125                              <1> exittt:
   126                              <1>     popa
   127                              <1>     mov sp, bp
   128                              <1>     pop bp
   129                              <1>     ret 2
   130                              <1> 
   131                              <1> collisioncheck:
   132                              <1>     push bp
   133                              <1>     mov bp, sp
   134                              <1>     pusha
   135                              <1>     mov di, [bp+4]
   136                              <1>    ; mov si, [bp+6]
   137                              <1>     mov bx, [bp+6]
   138                              <1> 
   139                              <1>     cmp byte [es:di], 0x00 ; Check if the pixel is background (0x07)
   140                              <1>     je collision            ; If yes, handle collision
   141                              <1> 
   142                              <1>         
   143                              <1>    jmp exitt
   144                              <1> 
   145                              <1> collision:
   146                              <1> ;      ; Set flag to 'D' (for moving down)
   147                              <1>     push bx                 ; Push bird's position
   148                              <1>     call moveBirddown 
   149                              <1>     
   150                              <1> jmp exitt
   151                              <1>              
   152                              <1> 
   153                              <1> exitt:
   154                              <1>     popa
   155                              <1>     mov sp, bp
   156                              <1>     pop bp
   157                              <1>     ret 4
   158                              <1> %endif
   108                                                          %include "renderImage.asm"
     1                              <1> %ifndef renderImage_asm
     2                              <1> %define renderImage_asm
     3                              <1> 
     4                              <1> renderImage:                push bp
     5                              <1>                             mov bp, sp
     6                              <1>                             pushA
     7                              <1>                             push DS
     8                              <1> 
     9                              <1>                             mov ah, 0x3D                ; open file service of int 21h
    10                              <1>                             mov al, 0x00                ; read mode
    11                              <1>                             mov dx, [bp+8]              ; point dx to the file name
    12                              <1>                             int 21h
    13                              <1> 
    14                              <1>                             ; carry flag indicates whether the file has been opened successfully or not
    15                              <1>                             ; if the file has been opened successfully then ax will contain the file handle
    16                              <1>                             ; otherwise, it will contain the error code
    17                              <1> 
    18                              <1>                             jc file_error               ; if the file hasn't been opened successfully
    19                              <1> 
    20                              <1>                             
    21                              <1>                             mov bx, ax                  ; move file handle to bx
    22                              <1>                             mov ax, [bp+4]              ; vram segment = 0xA000
    23                              <1>                             mov DS, ax
    24                              <1>                             mov cx, [bp+6]              ; byte count = 64000
    25                              <1>                             mov dx, 0
    26                              <1>                             mov ah, 0x3F
    27                              <1>                             int 21h
    28                              <1> 
    29                              <1>                             jc file_error
    30                              <1> 
    31                              <1>                             mov ah, 0x3E
    32                              <1>                             int 21h
    33                              <1> 
    34                              <1>                             pop DS
    35                              <1>                             popA
    36                              <1>                             mov sp, bp
    37                              <1>                             pop bp
    38                              <1>                             ret 6
    39                              <1> 
    40                              <1>         file_error:         mov ah, 0x4C
    41                              <1>                             mov ah, 1
    42                              <1>                             int 21h
    43                              <1> 
    44                              <1> %endif
   109                                                          %include "palette.asm"
     1                              <1> %ifndef palette_asm
     2                              <1> %define palette_asm
     3                              <1> 
     4                              <1> ; start
     5                              <1> palette_data0: db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x00, 0x26, 0x00, 0x00, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x19, 0x0C, 0x00, 0x26, 0x0C, 0x00, 0x33, 0x0C, 0x00, 0x3F, 0x0C, 0x00, 0x00, 0x19, 0x00, 0x0C, 0x19, 0x00, 0x19, 0x19, 0x00, 0x26, 0x19, 0x00, 0x33, 0x19, 0x00, 0x3F, 0x19, 0x00, 0x00, 0x26, 0x00, 0x0C, 0x26, 0x00, 0x19, 0x26, 0x00, 0x26, 0x26, 0x00, 0x33, 0x26, 0x00, 0x3F, 0x26, 0x00, 0x00, 0x33, 0x00, 0x0C, 0x33, 0x00, 0x19, 0x33, 0x00, 0x26, 0x33, 0x00, 0x33, 0x33, 0x00, 0x3F, 0x33, 0x00, 0x00, 0x3F, 0x00, 0x0C, 0x3F, 0x00, 0x19, 0x3F, 0x00, 0x26, 0x3F, 0x00, 0x33, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x19, 0x00, 0x0C, 0x26, 0x00, 0x0C, 0x33, 0x00, 0x0C, 0x3F, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x19, 0x0C, 0x0C, 0x26, 0x0C, ...
     6                              <1> ; instructions
     7                              <1> palette_data1: db 0x01, 0x01, 0x02, 0x04, 0x04, 0x06, 0x05, 0x06, 0x09, 0x09, 0x09, 0x0C, 0x0B, 0x0D, 0x14, 0x09, 0x0A, 0x12, 0x0A, 0x0D, 0x19, 0x06, 0x08, 0x0D, 0x09, 0x02, 0x0D, 0x05, 0x02, 0x09, 0x0B, 0x11, 0x1B, 0x0D, 0x02, 0x13, 0x12, 0x11, 0x13, 0x0D, 0x05, 0x13, 0x0D, 0x0D, 0x0E, 0x13, 0x32, 0x3A, 0x13, 0x05, 0x1A, 0x13, 0x35, 0x3C, 0x06, 0x09, 0x11, 0x13, 0x09, 0x1C, 0x0C, 0x19, 0x23, 0x1A, 0x19, 0x1A, 0x12, 0x2D, 0x35, 0x08, 0x06, 0x0B, 0x2A, 0x29, 0x2A, 0x12, 0x2A, 0x33, 0x0B, 0x15, 0x1C, 0x31, 0x1E, 0x3C, 0x35, 0x25, 0x3D, 0x25, 0x25, 0x26, 0x15, 0x15, 0x16, 0x33, 0x22, 0x3C, 0x22, 0x21, 0x22, 0x0B, 0x16, 0x22, 0x2D, 0x2D, 0x2D, 0x06, 0x0D, 0x13, 0x0C, 0x11, 0x16, 0x32, 0x31, 0x32, 0x13, 0x15, 0x1C, 0x1D, 0x1D, 0x1E, 0x0C, 0x1D, 0x24, 0x0E, 0x21, 0x2B, 0x1B, 0x09, 0x24, 0x35, 0x35, 0x35, 0x1A, 0x0D, 0x24, 0x12, 0x02, 0x1A, 0x0D, 0x1E, 0x29, 0x3D, 0x3D, 0x3E, 0x11, 0x12, 0x1A, 0x3A, 0x3A, 0x3A, 0x10, 0x02, 0x16, 0x0E, 0x25, 0x2D, 0x2E, 0x19, 0x3A, 0x2A, 0x16, 0x35, 0x11, 0x25, 0x2D, 0x36, 0x29, ...
     8                              <1> 
     9                              <1> 
    10                              <1> ; background
    11                              <1> palette_data2: db 0x06, 0x04, 0x09, 0x09, 0x05, 0x0C, 0x05, 0x04, 0x06, 0x0D, 0x05, 0x12, 0x14, 0x09, 0x1B, 0x11, 0x06, 0x16, 0x04, 0x03, 0x05, 0x13, 0x07, 0x19, 0x0B, 0x09, 0x0C, 0x1B, 0x0A, 0x22, 0x0D, 0x09, 0x13, 0x1C, 0x0D, 0x23, 0x11, 0x09, 0x15, 0x19, 0x09, 0x1E, 0x24, 0x11, 0x2B, 0x05, 0x09, 0x0D, 0x11, 0x0D, 0x13, 0x23, 0x0E, 0x29, 0x05, 0x0D, 0x14, 0x15, 0x0D, 0x1C, 0x14, 0x11, 0x14, 0x24, 0x15, 0x2B, 0x1C, 0x11, 0x23, 0x21, 0x0D, 0x26, 0x05, 0x0A, 0x11, 0x0C, 0x0C, 0x12, 0x24, 0x19, 0x2B, 0x16, 0x0A, 0x21, 0x0E, 0x0C, 0x0E, 0x2C, 0x21, 0x33, 0x2D, 0x25, 0x33, 0x35, 0x31, 0x3B, 0x1D, 0x15, 0x24, 0x33, 0x2E, 0x39, 0x2B, 0x1D, 0x32, 0x29, 0x15, 0x2E, 0x28, 0x12, 0x2D, 0x19, 0x0D, 0x1E, 0x0A, 0x11, 0x1A, 0x22, 0x1E, 0x24, 0x1A, 0x15, 0x1B, 0x06, 0x11, 0x19, 0x2A, 0x19, 0x31, 0x1B, 0x19, 0x1D, 0x25, 0x1D, 0x2B, 0x21, 0x11, 0x26, 0x2A, 0x16, 0x30, 0x1A, 0x12, 0x1C, 0x36, 0x35, 0x3C, 0x2D, 0x29, 0x33, 0x0A, 0x15, 0x1D, 0x21, 0x0B, 0x25, 0x15, 0x11, 0x1A, 0x32, 0x2A, 0x39, 0x16, 0x0D, 0x21, 0x0C, 0x0D, ...
    12                              <1> 
    13                              <1> ; escape
    14                              <1> palette_data3: db  0x02, 0x02, 0x04, 0x04, 0x06, 0x0A, 0x03, 0x04, 0x06, 0x05, 0x08, 0x0E, 0x06, 0x0A, 0x11, 0x06, 0x0D, 0x14, 0x0A, 0x0A, 0x13, 0x12, 0x0C, 0x19, 0x09, 0x11, 0x1B, 0x09, 0x0D, 0x14, 0x0B, 0x19, 0x23, 0x0A, 0x15, 0x1D, 0x09, 0x0E, 0x19, 0x03, 0x03, 0x08, 0x0A, 0x16, 0x21, 0x3E, 0x3E, 0x3E, 0x0A, 0x0B, 0x19, 0x07, 0x11, 0x1A, 0x06, 0x07, 0x10, 0x0D, 0x21, 0x2C, 0x12, 0x29, 0x33, 0x0C, 0x1E, 0x29, 0x07, 0x0E, 0x18, 0x0C, 0x1D, 0x26, 0x09, 0x09, 0x0D, 0x12, 0x22, 0x2B, 0x39, 0x3A, 0x3A, 0x0B, 0x10, 0x16, 0x13, 0x15, 0x1A, 0x11, 0x26, 0x31, 0x12, 0x25, 0x2E, 0x13, 0x19, 0x23, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0E, 0x26, 0x31, 0x12, 0x12, 0x1C, 0x19, 0x1A, 0x1D, 0x24, 0x25, 0x26, 0x11, 0x12, 0x15, 0x29, 0x29, 0x2B, 0x13, 0x1D, 0x25, 0x13, 0x2C, 0x36, 0x12, 0x16, 0x22, 0x25, 0x26, 0x29, 0x14, 0x2E, 0x38, 0x2D, 0x2D, 0x2E, 0x0E, 0x24, 0x2E, 0x13, 0x1E, 0x29, 0x1C, 0x1E, 0x21, 0x2E, 0x2E, 0x30, 0x1A, 0x2A, 0x32, 0x07, 0x10, 0x17, 0x1C, 0x1D, 0x1E, 0x21, 0x22, 0x24, 0x11, 0x0C, 0x16, 0x14, 0x1A,...
    15                              <1> 
    16                              <1> ; end
    17                              <1> palette_data4: db 0x01, 0x01, 0x03, 0x05, 0x05, 0x0A, 0x0B, 0x0A, 0x12, 0x0D, 0x0D, 0x15, 0x04, 0x04, 0x07, 0x09, 0x08, 0x0D, 0x3F, 0x3F, 0x3F, 0x08, 0x07, 0x0D, 0x12, 0x12, 0x1A, 0x15, 0x15, 0x1D, 0x0A, 0x05, 0x05, 0x0E, 0x0D, 0x19, 0x18, 0x17, 0x1F, 0x10, 0x0E, 0x1A, 0x1B, 0x1D, 0x24, 0x24, 0x26, 0x2B, 0x12, 0x0A, 0x09, 0x15, 0x0D, 0x0B, 0x11, 0x11, 0x15, 0x2B, 0x2D, 0x32, 0x10, 0x0F, 0x16, 0x19, 0x19, 0x1C, 0x19, 0x19, 0x21, 0x08, 0x07, 0x10, 0x29, 0x2A, 0x2C, 0x04, 0x03, 0x08, 0x0E, 0x11, 0x19, 0x31, 0x32, 0x34, 0x39, 0x39, 0x39, 0x0E, 0x08, 0x07, 0x35, 0x35, 0x35, 0x21, 0x22, 0x24, 0x26, 0x28, 0x2E, 0x07, 0x08, 0x0C, 0x16, 0x19, 0x21, 0x1E, 0x21, 0x29, 0x0E, 0x10, 0x16, 0x2E, 0x31, 0x35, 0x34, 0x36, 0x39, 0x25, 0x25, 0x26, 0x19, 0x0E, 0x0B, 0x29, 0x2B, 0x30, 0x2D, 0x2D, 0x2E, 0x21, 0x23, 0x29, 0x1C, 0x11, 0x0E, 0x15, 0x15, 0x16, 0x1E, 0x20, 0x26, 0x0D, 0x0D, 0x0E, 0x1D, 0x1D, 0x1E, 0x16, 0x18, 0x1E, 0x10, 0x09, 0x07, 0x22, 0x15, 0x11, 0x26, 0x29, 0x30, 0x1A, 0x1F, 0x28, 0x08, 0x03, 0x02, 0x14, 0x17, ...
    18                              <1> 
    19                              <1> 
    20                              <1> set_palette1:                push bp
    21                              <1>                             mov bp, sp
    22                              <1> 
    23                              <1>                             mov dx, 0x3C8       ; DAC write index register
    24                              <1>                             xor al, al          ; Start with color index 0
    25                              <1>                             out dx, al
    26                              <1> 
    27                              <1>                             mov bx, [bp+4]
    28                              <1>                             cmp bx, 0
    29                              <1>                             jne is1
    30                              <1>                             mov si, palette_data0
    31                              <1>                             jmp write_to_port
    32                              <1> 
    33                              <1>      is1:                   cmp bx, 1
    34                              <1>                             jne is2
    35                              <1>                             mov si, palette_data1
    36                              <1>                             jmp write_to_port
    37                              <1> 
    38                              <1>      is2:                   cmp bx, 2
    39                              <1>                             jne is3
    40                              <1>                             mov si, palette_data2
    41                              <1>                             jmp write_to_port
    42                              <1> 
    43                              <1>      is3:                   cmp bx, 3
    44                              <1>                             jne is4
    45                              <1>                             mov si, palette_data3
    46                              <1>                             jmp write_to_port
    47                              <1> 
    48                              <1>      is4:                   cmp bx, 4
    49                              <1>                             jne write_to_port
    50                              <1>                             mov si, palette_data4
    51                              <1>                             jmp write_to_port                           
    52                              <1> 
    53                              <1>     write_to_port:          mov cx, 768         ; 256 colors * 3 components
    54                              <1>                             mov dx, 0x3C9       ; DAC data register
    55                              <1>                             
    56                              <1>                             rep outsb           ; Output 768 bytes from ds:si to port dx
    57                              <1> 
    58                              <1>                             mov sp, bp
    59                              <1>                             pop bp 
    60                              <1>                             ret 2
    61                              <1> 
    62                              <1> %endif
   110                                  %include "mus2.asm"
     1                              <1> %ifndef mus2_asm
     2                              <1> %define mus2_asm
     3                              <1> 
     4                              <1> 
     5 00001366 D448                <1> music_length dw 18644
     6 00001368 <bin 48D4h>         <1> music_data incbin "getthem.imf"
     7                              <1> 
     8                              <1> 
     9                              <1> 
    10                              <1> play_music:
    11                              <1>     ; Initialize index
    12 00005C3C BE0000              <1>    mov si, 0 ; current index for music_data
    13                              <1> 
    14                              <1> .next_note:
    15                              <1>  
    16 00005C3F BA8803              <1>     mov dx, 388h
    17 00005C42 8A84[6813]          <1>     mov al, [si + music_data + 0]
    18 00005C46 EE                  <1>     out dx, al
    19                              <1> 
    20                              <1>  
    21 00005C47 BA8903              <1>     mov dx, 389h
    22 00005C4A 8A84[6913]          <1>     mov al, [si + music_data + 1]
    23 00005C4E EE                  <1>     out dx, al
    24                              <1> 
    25                              <1>    
    26 00005C4F 8B9C[6A13]          <1>     mov bx, [si + music_data + 2]
    27                              <1> 
    28                              <1>    
    29 00005C53 83C604              <1>     add si, 4
    30                              <1> 
    31                              <1>   
    32                              <1> .repeat_delay:
    33 00005C56 B9D007              <1>     mov cx, 2000;
    34 00005C59 D1EB                <1> 	 shr bx,1
    35                              <1> 
    36                              <1> .delay:
    37 00005C5B E2FE                <1>     loop .delay 
    38 00005C5D 4B                  <1>     dec bx       
    39 00005C5E 7FF6                <1>     jg .repeat_delay 
    40                              <1> 
    41                              <1>     ; Check if end of music_data is reached
    42 00005C60 3B36[6613]          <1>     cmp si, [music_length]
    43 00005C64 72D9                <1>     jb .next_note 
    44 00005C66 EBD4                <1> 	jmp play_music
    45                              <1> %endif
   111 00005C68 9B2E                    divisor : dw 11931
   112 00005C6A 00                      is_paused:              db 0
   113 00005C6B 00A0                    segment1:               dw 0xA000
   114 00005C6D 0000                    offset1:                dw 0
   115 00005C6F 007D                    word_count:             dw 32000
   116 00005C71 00FA                    byte_count:             dw 64000
   117 00005C73 80ED                    bg_byte_count:          dw 320*190                  ;
   118 00005C75 0000                    clr_attribute1:         dw 0x00
   119 00005C77 0700                    clr_attribute2:         dw 0x07
   120 00005C79 0F00                    clr_attribute3:         dw 0x0f
   121 00005C7B 4040                    bg_attribute:           dw 0x4040
   122 00005C7D C800                    height:                 dw 200
   123 00005C7F 4001                    width:                  dw 320
   124 00005C81 BE00                    grass_row:              dw 190
   125 00005C83 0A00                    grass_height:           dw 10
   126 00005C85 46000A006E001E005A-     rectangle_height:       dw 70, 10, 110, 30, 90      ;
   126 00005C8E 00                 
   127 00005C8F 0000<rep 3h>            current_pillar_height:  times 3 dw 0                ;
   128 00005C95 1400                    rectangle_width:        dw 20 
   129 00005C97 0200                    pillar_count:           dw 2                      ;
   130 00005C99 4600                    space_pillars:          dw 70
   131 00005C9B 0000                    rectangle_x1:           dw 0
   132 00005C9D 7800                    rectangle_x2:           dw 120
   133 00005C9F AA002C01D2000000        rectangle_y :           dw 170, 300, 210, 0
   134 00005CA7 9B00                    bird_x:                 dw 155
   135 00005CA9 5400                    bird_y:                 dw 84       
   136 00005CAB 5500                    bird_row:               dw 85
   137 00005CAD 4600                    bird_column:            dw 70
   138 00005CAF 44                      birdDirection:          db 'D'
   139 00005CB0 0000                    lower_limit:            dw 0
   140 00005CB2 0500                    upper_limit:            dw 5
   141 00005CB4 0000                    result:                 dw 0
   142                                  ;seed:                   dw 0
   143 00005CB6 00FA                    buffer_offset           dw 64000                    ; after 64000 bytes in 0xA000
   144 00005CB8 2201                    pillar_start_pos:       dw 290
   145 00005CBA 0100                    pillar_update_speed:    dw 1
   146 00005CBC 57415244412032334C-     starting_message:       db "WARDA 23L-0601         EZAAN 23L-0676                                                   FALL 2024", '$'
   146 00005CC5 2D3036303120202020-
   146 00005CCE 2020202020455A4141-
   146 00005CD7 4E2032334C2D303637-
   146 00005CE0 362020202020202020-
   146 00005CE9 202020202020202020-
   146 00005CF2 202020202020202020-
   146 00005CFB 202020202020202020-
   146 00005D04 202020202020202020-
   146 00005D0D 202020202020204641-
   146 00005D16 4C4C203230323424   
   147 00005D1E 596F75206861766520-     ending_message:         db "You have exited!", '$'
   147 00005D27 6578697465642124   
   148 00005D2F 00000000                exitProgram:            dd 0
   149 00005D33 00000000                moveBirdFunction:       dd 0
   150 00005D37 00000000                original_isr:           dd 0
   151 00005D3B 73742E72617700          start_screen:           db "st.raw", 0
   152 00005D42 656E642E72617700         exit_screen:            db "end.raw", 0
   153 00005D4A 747279792E72617700      escape_screen:          db "tryy.raw", 0
   154 00005D53 696E7374722E726177-     instr_screen:           db "instr.raw", 0
   154 00005D5C 00                 
   155 00005D5D 66696E2E72617700        back_screen : db "fin.raw",0
   156 00005D65 0000                    up_release_tick_count:  dw 0
   157 00005D67 53434F5245202024        scoreBuffer db "SCORE  ", '$'
   158 00005D6F 00000000                old_timer :dd 0
   159 00005D73 3024                    score db "0",'$'
   160 00005D75 000000000000000000-     pcb			dw 0, 0, 0,0,0,0, 0 ; task0 regs[cs:pcb + 0]
   160 00005D7E 0000000000         
   161 00005D83 000000000000000000-     		dw 0, 0, 0,0,0,0, 0 ; task1 regs start at [cs:pcb + 10]
   161 00005D8C 0000000000         
   162 00005D91 000000000000000000-     		dw 0, 0, 0,0,0, 0, 0 ;;ask2 regs start at [cs:pcb + 20]
   162 00005D9A 0000000000         
   163                                  
   164 00005D9F 0000                    current:	dw 0 
   165                                  
   166 00005DA1 60                      kbr:                    pushA
   167                                  
   168 00005DA2 E460                                            in al, 0x60               
   169 00005DA4 3C19                                            cmp al, 0x19              ; p
   170 00005DA6 741E                                            je handle_escape
   171                                                          
   172 00005DA8 3C39                                            cmp al, 0x39              ;  space 
   173 00005DAA 7437                                            je resume_game
   174                                  						
   175 00005DAC 3C01                    						cmp al ,0x01
   176 00005DAE 7445                    						je endgame
   177                                  
   178 00005DB0 3C48                                            cmp al, 0x48              ; Check if up arrow is pressed
   179 00005DB2 7508                                            jne next_cmp
   180 00005DB4 2EC606[AF5C]55                                  mov byte [cs:birdDirection], 'U'
   181 00005DBA EB55                                            jmp call_originalISR 
   182                                  
   183 00005DBC 3C50                        next_cmp:           cmp al, 0x50              ; Check if down arrow is pressed
   184                                                          ;jne call_originalISR
   185 00005DBE 2EC606[AF5C]57                                  mov byte [cs:birdDirection], 'W'
   186 00005DC4 EB4B                                            jmp call_originalISR
   187                                  
   188                                  handle_escape:         
   189 00005DC6 60                                              pushA                     
   190                                  
   191 00005DC7 6A03                                             push word 3
   192 00005DC9 E84FB1                  						 call set_palette1
   193 00005DCC 68[4A5D]                                        push word escape_screen
   194 00005DCF FF36[715C]                                      push word [byte_count]
   195 00005DD3 FF36[6B5C]                                      push word [segment1]
   196 00005DD7 E864B3                                          call renderImage
   197                                    
   198 00005DDA 2EC606[6A5C]01                                  mov byte [cs:is_paused], 1 
   199 00005DE0 61                                              popA                      
   200 00005DE1 EB2E                                            jmp  call_originalISR
   201                                  
   202                                  resume_game:            ; Resume the game if paused
   203 00005DE3 2E803E[6A5C]00                                  cmp byte [cs:is_paused], 0
   204 00005DE9 7426                                            je call_originalISR       ;  return
   205                                  
   206 00005DEB 60                                              pushA                    
   207                                  
   208                                                          
   209                                  
   210 00005DEC 2EC606[6A5C]00                                  mov byte [cs:is_paused], 0 
   211                                  
   212 00005DF2 61                                              popA                     
   213 00005DF3 EB1C                                            jmp call_originalISR
   214                                  			endgame:
   215 00005DF5 6A03                    						push word  3
   216 00005DF7 E821B1                  						call set_palette1					
   217 00005DFA 68[4A5D]                						push word escape_screen 
   218 00005DFD FF36[715C]              						push word [byte_count]
   219 00005E01 FF36[6B5C]              						push word [segment1]
   220 00005E05 E836B3                  						call renderImage
   221                                  					
   222 00005E08 B020                    											mov al, 0x20            
   223 00005E0A E620                    						out 0x20, al          
   224 00005E0C 2EFF2E[2F5D]            						jmp far [CS:exitProgram] 
   225                                  						;jmp call_originalISR
   226                                  
   227 00005E11 61                      call_originalISR:       popA
   228 00005E12 2EFF2E[375D]                                    jmp far [cs:original_isr]
   229                                  timer_interrupt:
   230 00005E17 50                      								push ax
   231 00005E18 53                      								push bx
   232 00005E19 51                      								push cx
   233 00005E1A 52                      								push dx
   234                                  								
   235 00005E1B 2E803E[AF5C]57          								cmp byte [cs:birdDirection], 'W'
   236 00005E21 751A                    								jne skip_bird_flag_update
   237 00005E23 2EFF06[655D]            								inc word [CS:up_release_tick_count]
   238 00005E28 2E833E[655D]09          								cmp word [CS:up_release_tick_count], 9
   239 00005E2E 750D                    								jne skip_bird_flag_update
   240 00005E30 2EC606[AF5C]44          								mov byte [cs:birdDirection], 'D'
   241 00005E36 2EC706[655D]0000        								mov word [CS:up_release_tick_count], 0
   242                                  
   243 00005E3D 2E8A1E[9F5D]            skip_bird_flag_update:			mov bl, [cs:current]				; read index of current task ... bl = 0
   244 00005E42 B80E00                  								mov ax, 14							; space used by one task
   245 00005E45 F6E3                    								mul bl								; multiply to get start of task.. 10x0 = 0
   246 00005E47 89C3                    								mov bx, ax							; load start of task in bx....... bx = 0
   247                                  								
   248 00005E49 58                      								pop ax								; read original value of bx
   249 00005E4A 2E8987[7B5D]            								mov [cs:pcb+bx+6], ax				; space for current task's DX
   250                                  					
   251 00005E4F 58                      								pop ax								; read original value of bx
   252 00005E50 2E8987[795D]            								mov [cs:pcb+bx+4], ax				; space for current task's CX
   253                                  					
   254 00005E55 58                      								pop ax								; read original value of bx
   255 00005E56 2E8987[775D]            								mov [cs:pcb+bx+2], ax				; space for current task's BX
   256                                  					
   257 00005E5B 58                      								pop ax								; read original value of ax
   258 00005E5C 2E8987[755D]            								mov [cs:pcb+bx+0], ax				; space for current task's AX
   259                                  					
   260 00005E61 58                      								pop ax								; read original value of ip
   261 00005E62 2E8987[7D5D]            								mov [cs:pcb+bx+8], ax				; space for current task
   262                                  					
   263 00005E67 58                      								pop ax								; read original value of cs
   264 00005E68 2E8987[7F5D]            							mov [cs:pcb+bx+10], ax				; space for current task
   265                                  					
   266 00005E6D 58                      								pop ax								; read original value of flags
   267 00005E6E 2E8987[815D]            								mov [cs:pcb+bx+12], ax					; space for current task
   268                                  					
   269 00005E73 2EFE06[9F5D]            								inc byte [cs:current]				; update current task index...1
   270 00005E78 2E803E[9F5D]02          								cmp byte [cs:current], 2			; is task index out of range
   271 00005E7E 7506                    								jne skipreset						; no, proceed
   272 00005E80 2EC606[9F5D]00          								mov byte [cs:current], 0			; yes, reset to task 0
   273                                  					
   274 00005E86 2E8A1E[9F5D]            skipreset:						mov bl, [cs:current]				; read index of current task
   275 00005E8B B80E00                  								mov ax, 14							; space used by one task
   276 00005E8E F6E3                    								mul bl								; multiply to get start of task
   277 00005E90 89C3                    								mov bx, ax							; load start of task in bx... 10
   278                                  								
   279 00005E92 B020                    								mov al, 0x20
   280 00005E94 E620                    								out 0x20, al						; send EOI to PIC
   281                                  					
   282 00005E96 2EFFB7[815D]            								push word [cs:pcb+bx+12]				; flags of new task... pcb+10+8
   283 00005E9B 2EFFB7[7F5D]            								push word [cs:pcb+bx+10]				; cs of new task ... pcb+10+6
   284 00005EA0 2EFFB7[7D5D]            								push word [cs:pcb+bx+8]				; ip of new task... pcb+10+4
   285 00005EA5 2E8B87[755D]            								mov ax, [cs:pcb+bx+0]				; ax of new task...pcb+10+0
   286 00005EAA 2E8B8F[795D]            								mov cx, [cs:pcb+bx+4]				; ax of new task...pcb+10+0
   287 00005EAF 2E8B97[7B5D]            								mov dx, [cs:pcb+bx+6]				; ax of new task...pcb+10+0
   288 00005EB4 2E8B9F[775D]            								mov bx, [cs:pcb+bx+2]				; bx of new task...pcb+10+2
   289                                  								
   290                                  					
   291 00005EB9 CF                      								iret								; return to new task
   292                                  
   293                                  
   294                                    ; Return to caller
   295                                             ; Return to caller
   296                                  
   297                                    ; Buffer to hold the score string
   298                                  
   299                                  
   300                                  ; kbr:                    push bp
   301                                  						; pushA
   302                                  
   303                                                          ; cmp byte [cs:birdDirection], 'W'
   304                                                          ; jne first_cmp
   305                                                          ; inc word [CS:up_release_tick_count]
   306                                                          ; cmp word [CS:up_release_tick_count], 9
   307                                                          ; jne first_cmp
   308                                                          ; mov byte [cs:birdDirection], 'D'
   309                                                          ; mov word [CS:up_release_tick_count], 0
   310                                                          
   311                                      ; first_cmp:          in al, 0x60
   312                                  
   313                                  						 ; cmp al, 0x19              ; p
   314                                                          ; je handle_escape
   315                                                     
   316                                  						; cmp al, 0x39              ;  space 
   317                                                          ; je resume_game
   318                                  						; cmp al, 0x01
   319                                  						; jne next_cmp  
   320                                                          ; mov al, 0x20
   321                                                          ; out 0x20, al
   322                                  						; ; pushf 
   323                                  						; mov word [bp+4], CS
   324                                  						; mov word ax, exitProgramFunction1
   325                                  						; mov word [bp+2], ax
   326                                  						; popA
   327                                  						; pop bp
   328                                  						; iret
   329                                  						
   330                                  
   331                                      ; next_cmp:           cmp al, 0x48
   332                                                          ; jne call_originalISR
   333                                                          ; mov byte [cs:birdDirection], 'U'
   334                                  						; jmp call_originalISR         
   335                                  
   336                                      ; call_originalISR:   popA
   337                                  						; pop bp
   338                                                          ; jmp far [cs:original_isr]
   339                                  			; handle_escape:         
   340                                                          ; pushA                     
   341                                  
   342                                                          
   343                                                          ; push word escape_screen
   344                                                          ; push word [byte_count]      
   345                                                          ; push word [segment1]
   346                                                          ; call renderImage
   347                                    
   348                                                          ; mov byte [cs:is_paused], 1 
   349                                                          ; JMP call_originalISR
   350                                  
   351                                  ; resume_game:            ; Resume the game if paused
   352                                                          ; cmp byte [cs:is_paused], 0
   353                                                          ; je call_originalISR       ;  return
   354                                  
   355                                                          ; pushA                    
   356                                  
   357                                                          ; mov byte [cs:is_paused], 0 
   358                                  						; jmp call_originalISR
   359                                  ; ; sukp:                  popA
   360                                  						; ; ;pop bp
   361                                                          ; ; jmp far [cs:original_isr]
   362                                  
   363 00005EBA 60                      hookKeyboard:           pushA
   364 00005EBB 06                                              push ES
   365                                   
   366 00005EBC B80935                                          mov ax, 0x3509
   367 00005EBF CD21                                            int 21h
   368 00005EC1 2E891E[375D]                                    mov word [cs:original_isr], bx
   369 00005EC6 2E8C06[395D]                                    mov word [cs:original_isr+2], es
   370                                  						
   371 00005ECB BA[A15D]                                        mov dx, kbr
   372 00005ECE B80925                                          mov ax, 0x2509
   373 00005ED1 CD21                                            int 21h
   374                                  
   375 00005ED3 07                                              pop ES
   376 00005ED4 61                                              popA
   377 00005ED5 C3                                              ret
   378                                  
   379 00005ED6 B8[0300]                addMoveBirdAddress:     mov ax, moveBird
   380 00005ED9 2EA3[335D]                                      mov [cs:moveBirdFunction], ax
   381 00005EDD 8CD8                                            mov ax, DS
   382 00005EDF 2EA3[355D]                                      mov [cs:moveBirdFunction+2], ax
   383 00005EE3 C3                                              ret
   384                                  
   385                                  exitProgramFunction1: 
   386 00005EE4 FA                      						cli
   387 00005EE5 31C0                    						xor ax, ax
   388 00005EE7 8EC0                    						mov es,ax  
   389 00005EE9 A1[375D]                                        mov ax, [original_isr]
   390 00005EEC 26A32400                                        mov [ES:9*4], ax
   391 00005EF0 A1[395D]                                        mov ax, [original_isr+2]
   392 00005EF3 26A32600                                        mov [ES:9*4+2], ax
   393 00005EF7 FB                      						sti
   394                                  						
   395 00005EF8 FA                      						cli
   396 00005EF9 31C0                    						xor ax, ax
   397 00005EFB 8EC0                    						mov es,ax  
   398 00005EFD A1[6F5D]                                        mov ax, [old_timer]
   399 00005F00 26A32000                                        mov [ES:8*4], ax
   400 00005F04 A1[715D]                                        mov ax, [old_timer+2]
   401 00005F07 26A32200                                        mov [ES:8*4+2], ax
   402 00005F0B FB                      						sti
   403                                  									
   404 00005F0C 6A04                    						push word 4
   405 00005F0E E80AB0                  						call set_palette1
   406                                  
   407 00005F11 68[425D]                                        push word exit_screen
   408 00005F14 FF36[715C]                                      push word [byte_count]
   409 00005F18 FF36[6B5C]                                      push word [segment1]
   410                                  
   411 00005F1C E81FB2                                          call renderImage
   412                                  					
   413                                                      
   414                                  
   415                                  					
   416 00005F1F BA[675D]                						mov dx,scoreBuffer
   417                                  						
   418 00005F22 B409                        mov ah, 0x09
   419 00005F24 CD21                        int 21h
   420 00005F26 BA[735D]                		mov dx,score
   421                                  						
   422 00005F29 B409                        mov ah, 0x09
   423 00005F2B CD21                        int 21h
   424                                  
   425                                      ; Display your name on the starting screen
   426                                      
   427 00005F2D AC                          lodsb      
   428                                    
   429 00005F2E B400                     mov ah, 0
   430 00005F30 CD16                                            int 16h
   431                                      ; Display your name on the starting screen
   432                                      
   433                                      ; lodsb                     ; Load next character from DS:SI into AL
   434                                  
   435                                      ; mov ah, 0
   436                                      ; int 16h
   437                                           
   438 00005F32 B8004C                                          mov ax, 4c00h
   439 00005F35 CD21                                            int 21h
   440                                  						
   441                                  addExitAddress:   
   442                                  	 
   443 00005F37 B8[E45E]                						mov ax, exitProgramFunction1
   444 00005F3A 2EA3[2F5D]                                      mov word [cs:exitProgram], ax
   445 00005F3E 8CC8                                            mov ax, cs
   446 00005F40 2EA3[315D]                                      mov word [cs:exitProgram + 2], ax
   447 00005F44 C3                                              ret
   448                                  						
   449                                  change_freq:
   450 00005F45 50                      						push ax;
   451 00005F46 B036                    						mov al,0x36
   452 00005F48 E643                    						out 0x43,al
   453 00005F4A A1[685C]                						mov ax,[divisor]
   454 00005F4D E640                    						out 0x40,al
   455 00005F4F 88E0                    						mov al,ah
   456 00005F51 E640                    						out 0x40,al
   457 00005F53 5B                      						pop bx
   458 00005F54 C3                      						ret
   459                                  
   460                                  
   461                                  start:					;call change_freq
   462                                  
   463 00005F55 31C0                    						xor 	ax,ax
   464 00005F57 8EC0                    						mov 	es,ax
   465                                  			
   466                                  			
   467 00005F59 26A12400                						mov 	ax,[es:9*4]
   468 00005F5D A3[375D]                						mov 	[original_isr],ax
   469 00005F60 26A12600                						mov 	ax,[es:9*4+2]
   470 00005F64 A3[395D]                						mov 	[original_isr+2],ax
   471                                  						
   472                                  						
   473 00005F67 26A12000                						mov 	ax,[es:8*4]
   474 00005F6B A3[6F5D]                						mov 	[old_timer],ax
   475 00005F6E 26A12200                						mov 	ax,[es:8*4+2]
   476 00005F72 A3[715D]                						mov 	[old_timer+2],ax
   477 00005F75 FA                      						cli
   478                                  						; mov 	word[es:9*4],kbr
   479                                  						; mov 	[es:9*4+2],cs
   480 00005F76 26C7062000[175E]        						mov 	word[es:8*4], timer_interrupt
   481 00005F7D 268C0E2200              						mov 	[es:8*4+2], cs
   482 00005F82 FB                      						sti
   483                                  			
   484                                  				
   485 00005F83 2EC706[8B5D][3C5C]      						mov word [cs:pcb+14+8], play_music			; initialize ip
   486 00005F8A 2E8C0E[8D5D]            						mov [cs:pcb+14+10], cs						; initialize cs
   487 00005F8F 2EC706[8F5D]0002        						mov word [cs:pcb+14+12], 0x0200				; initialize flags
   488                                  			
   489                                  						; mov word [cs:pcb+20+4], play_music			; initialize ip
   490                                  						; mov [cs:pcb+20+6], cs						; initialize cs
   491                                  						; mov word [cs:pcb+20+8], 0x0200				; initialize flags
   492                                  			
   493 00005F96 2EC606[9F5D]00          						mov byte [cs:current], 0						; set current task index
   494 00005F9C 31C0                    						xor ax, ax
   495 00005F9E 8EC0                    						mov es, ax		
   496                                  					
   497                                  ; mov ax, 600
   498                                  ; out 0x40, al
   499                                  ; mov al, ah
   500                                  ; out 0x40, al			
   501                                  			
   502 00005FA0 B81300                                          mov ax, 0x0013
   503 00005FA3 CD10                                            int 10h
   504                                                          
   505 00005FA5 6A00                    						push word 0
   506 00005FA7 E871AF                                          call set_palette1
   507                                                         
   508                                  			
   509                                                          ;;;starting screen
   510                                                          
   511 00005FAA 68[3B5D]                                        push word start_screen
   512 00005FAD FF36[715C]                                      push word [byte_count]
   513 00005FB1 FF36[6B5C]                                      push word [segment1]
   514 00005FB5 E886B1                                          call renderImage
   515 00005FB8 B400                    						mov ah, 0
   516 00005FBA CD16                                            int 16h
   517 00005FBC BA[BC5C]                						mov dx, starting_message
   518 00005FBF B409                    						mov ah, 0x09
   519 00005FC1 CD21                    						int 21h
   520                                  					
   521                                  						; Display your name on the starting screen
   522                                  						
   523 00005FC3 AC                      						lodsb                     ; Load next character from DS:SI into AL
   524                                  						; Wait for a key press to continue
   525 00005FC4 B400                    						mov ah, 0
   526 00005FC6 CD16                    						int 16h
   527                                  				
   528                                  									
   529 00005FC8 2EC706[8B5D][3C5C]      						mov word [cs:pcb+14+8], play_music			; initialize ip
   530 00005FCF 2E8C0E[8D5D]            						mov [cs:pcb+14+10], cs						; initialize cs
   531 00005FD4 2EC706[8F5D]0002        						mov word [cs:pcb+14+12], 0x0200		
   532                                  									; initialize flags
   533                                  			
   534                                  						; mov word [cs:pcb+20+4], music	
   535                                  								
   536                                  						; mov word [cs:pcb+14+8], play_music			; initialize ip
   537                                  						; mov [cs:pcb+14+10], cs						; initialize cs
   538                                  						; mov word [cs:pcb+14+12], 0x0200		   ;;;escape screen
   539 00005FDB 6A01                    						push word 1
   540 00005FDD E83BAF                  						call set_palette1
   541 00005FE0 68[535D]                                        push word instr_screen
   542 00005FE3 FF36[735C]                                      push word [bg_byte_count]
   543 00005FE7 FF36[6B5C]                                      push word [segment1]
   544 00005FEB E850B1                                          call renderImage
   545                                  						
   546                                  					
   547                                  
   548 00005FEE B400                                            mov ah, 0
   549 00005FF0 CD16                                            int 16h
   550                                                          
   551                                  				
   552 00005FF2 E842FF                  						call addExitAddress
   553 00005FF5 E8C2FE                                          call hookKeyboard
   554                                  										; initialize flags
   555                                  
   556                                  						; push word 1
   557                                  						; call set_palette1
   558                                  
   559 00005FF8 FF36[975C]                                      push word [pillar_count]
   560 00005FFC 68[855C]                                        push word rectangle_height
   561 00005FFF 68[8F5C]                                        push word current_pillar_height
   562 00006002 E83FB2                                          call set_pillar_height
   563 00006005 C706[8F5C]4600          						mov word  [current_pillar_height],70
   564 0000600B 68[5D5D]                                        push word back_screen
   565 0000600E FF36[715C]                                      push word [byte_count]
   566 00006012 FF36[6B5C]                                      push word [segment1]
   567                                                        
   568                                  
   569 00006016 68[AF5C]                                        push word birdDirection
   570 00006019 FF36[975C]                                      push word [pillar_count]
   571 0000601D FF36[7D5C]                                      push word [height]
   572 00006021 FF36[835C]                                      push word [grass_height]
   573 00006025 FF36[735C]                                      push word [bg_byte_count]
   574 00006029 68[AB5C]                                        push word bird_row
   575 0000602C FF36[AD5C]                                      push word [bird_column]
   576 00006030 68[8F5C]                                        push word current_pillar_height          ; passing address
   577 00006033 FF36[955C]                                      push word [rectangle_width]
   578 00006037 FF36[795C]                                      push word [clr_attribute3]
   579 0000603B FF36[995C]                                      push word [space_pillars]
   580 0000603F FF36[9B5C]                                      push word [rectangle_x1]
   581 00006043 68[9F5C]                                        push word rectangle_y                    ; passing address
   582 00006046 FF36[775C]                                      push word [clr_attribute2]
   583 0000604A FF36[815C]              		                push word [grass_row]
   584 0000604E FF36[7F5C]              		                push word [width]
   585 00006052 FF36[7B5C]                                      push word [bg_attribute]
   586 00006056 FF36[715C]                                      push word [byte_count]
   587 0000605A FF36[6B5C]                                      push word [segment1]
   588 0000605E FF36[6D5C]                                      push word [offset1]
   589 00006062 E80EB1                  		                call print_scr   
   590                                  
   591 00006065 B400                                            mov ah, 0
   592 00006067 CD16                                            int 16h                 
   593                                  
   594                                      l1:       
   595 00006069 2E803E[6A5C]01          	                    cmp byte [cs:is_paused], 1
   596 0000606F 74F8                                            je l1   
   597                                  						 
   598 00006071 68[5D5D]                                        push word back_screen
   599 00006074 FF36[735C]                                      push word [bg_byte_count]
   600 00006078 FF36[6B5C]                                      push word [segment1]
   601                                                      			; initialize flags
   602                                  
   603                                  
   604 0000607C 68[735D]                	                    push score
   605 0000607F 68[AF5C]                                        push word birdDirection
   606 00006082 FF36[B65C]                                      push word [buffer_offset]
   607 00006086 68[855C]                                        push word rectangle_height
   608 00006089 FF36[B85C]                                      push word [pillar_start_pos]
   609 0000608D FF36[BA5C]                                      push word [pillar_update_speed]
   610 00006091 FF36[975C]                                      push word [pillar_count]
   611 00006095 FF36[7D5C]                                      push word [height]
   612 00006099 FF36[835C]                                      push word [grass_height]
   613 0000609D FF36[735C]                                      push word [bg_byte_count]
   614 000060A1 68[AB5C]                                        push word bird_row
   615 000060A4 FF36[AD5C]                                      push word [bird_column]
   616 000060A8 68[8F5C]                                        push word current_pillar_height          ; passing address
   617 000060AB FF36[955C]                                      push word [rectangle_width]
   618 000060AF FF36[795C]                                      push word [clr_attribute3]
   619 000060B3 FF36[995C]                                      push word [space_pillars]
   620 000060B7 FF36[9B5C]                                      push word [rectangle_x1]
   621 000060BB 68[9F5C]                                        push word rectangle_y                    ; passing address
   622 000060BE FF36[775C]                                      push word [clr_attribute2]
   623 000060C2 FF36[815C]              		                push word [grass_row]
   624 000060C6 FF36[7F5C]              		                push word [width]
   625 000060CA FF36[7B5C]                                      push word [bg_attribute] 
   626 000060CE FF36[715C]                                      push word [byte_count]
   627 000060D2 FF36[6B5C]                                      push word [segment1]
   628 000060D6 FF36[6D5C]                                      push word [offset1]
   629 000060DA E809B2                                          call printAnimation
   630                                  						
   631 000060DD 66B9FFFFFF00                                    mov ecx, 0xffffff
   632 000060E3 E2FE                            l2:             loop l2
   633                                  
   634 000060E5 EB82                                            jmp l1
   635                                  
   636 000060E7 B8004C                                          mov ax, 0x4C00 
   637 000060EA CD21                                            int 21h
